@{
    ViewData["Title"] = "Enter Results - " + ViewBag.Examination.ExamName;
    ViewData["Breadcrumb"] = "Enter Results";
    var examination = (KMSI.Models.Examination)ViewBag.Examination;
}

<div class="enter-results">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Enter Exam Results</h1>
            <p class="text-muted">Record examination results for @examination.ExamName</p>
        </div>
        <a href="@Url.Action("Index", "Examination")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i>Back to Examinations
        </a>
    </div>

    <!-- Examination Info -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-info-circle text-primary me-2"></i>Examination Details
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <strong>Exam Code:</strong><br>
                    <span class="text-primary fw-semibold">@examination.ExamCode</span>
                </div>
                <div class="col-md-3">
                    <strong>Grade:</strong><br>
                    <span class="badge bg-primary fs-6">@examination.Grade?.GradeName</span>
                </div>
                <div class="col-md-3">
                    <strong>Date & Time:</strong><br>
                    @examination.ExamDate.ToString("dd/MM/yyyy")<br>
                    <small class="text-muted">@examination.StartTime.ToString(@"HH\:mm") - @examination.EndTime.ToString(@"HH\:mm")</small>
                </div>
                <div class="col-md-3">
                    <strong>Examiner:</strong><br>
                    @examination.ExaminerTeacher?.User?.FirstName @examination.ExaminerTeacher?.User?.LastName<br>
                    <small class="text-muted">@examination.ExaminerTeacher?.TeacherCode</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Students Results -->
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-clipboard-check text-success me-2"></i>Student Results
                </h5>
                <div class="d-flex gap-2 align-items-center">
                    <button type="button" class="btn btn-success btn-sm" onclick="markAllPresent()">
                        <i class="fas fa-check-circle me-1"></i>Mark All Present
                    </button>
                    <button type="button" class="btn btn-primary btn-sm" onclick="saveAllResults()">
                        <i class="fas fa-save me-1"></i>Save All Results
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            @if (examination.StudentExaminations != null && examination.StudentExaminations.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="resultsTable">
                        <thead class="table-light">
                            <tr>
                                <th width="200">Student</th>
                                <th width="120">Attendance</th>
                                <th width="100">Start Time</th>
                                <th width="100">End Time</th>
                                <th width="80">Score</th>
                                <th width="60">Grade</th>
                                <th width="80">Result</th>
                                <th>Teacher Notes</th>
                                <th width="120">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var studentExam in examination.StudentExaminations.OrderBy(se => se.Student.FirstName))
                            {
                                <tr data-student-exam-id="@studentExam.StudentExaminationId">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="student-avatar me-2">
                                                @studentExam.Student?.FirstName?.Substring(0, 1)@studentExam.Student?.LastName?.Substring(0, 1)
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@studentExam.Student?.FirstName @studentExam.Student?.LastName</div>
                                                <small class="text-muted">@studentExam.Student?.StudentCode</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <select class="form-select form-select-sm attendance-status" 
                                            data-field="attendanceStatus" onchange="updateResultFields(this)">
                                            <option value="">Select Status</option>
                                            <option value="Present" selected="@(studentExam.AttendanceStatus == "Present")">Present</option>
                                            <option value="Absent" selected="@(studentExam.AttendanceStatus == "Absent")">Absent</option>
                                            <option value="Late" selected="@(studentExam.AttendanceStatus == "Late")">Late</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="time" class="form-control form-control-sm start-time" 
                                            data-field="startTime" 
                                            value="@(studentExam.StartTime?.ToString(@"HH\:mm"))"
                                            @(studentExam.AttendanceStatus == "Present" || studentExam.AttendanceStatus == "Late" ? "" : "disabled")>
                                    </td>
                                    <td>
                                        <input type="time" class="form-control form-control-sm end-time" 
                                            data-field="endTime"
                                            value="@(studentExam.EndTime?.ToString(@"HH\:mm"))"
                                            @(studentExam.AttendanceStatus == "Present" || studentExam.AttendanceStatus == "Late" ? "" : "disabled")>
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm score" 
                                            data-field="score" 
                                            min="0" max="100" step="0.1"
                                            value="@studentExam.Score"
                                            onchange="calculateGrade(this)"
                                            @(studentExam.AttendanceStatus == "Present" || studentExam.AttendanceStatus == "Late" ? "" : "disabled")>
                                    </td>
                                    <td>
                                        <select class="form-select form-select-sm grade" 
                                            data-field="grade"
                                            @(studentExam.AttendanceStatus == "Present" || studentExam.AttendanceStatus == "Late" ? "" : "disabled")>
                                            <option value="">-</option>
                                            <option value="A+" selected="@(studentExam.Grade == "A+")">A+</option>
                                            <option value="A" selected="@(studentExam.Grade == "A")">A</option>
                                            <option value="A-" selected="@(studentExam.Grade == "A-")">A-</option>
                                            <option value="B+" selected="@(studentExam.Grade == "B+")">B+</option>
                                            <option value="B" selected="@(studentExam.Grade == "B")">B</option>
                                            <option value="B-" selected="@(studentExam.Grade == "B-")">B-</option>
                                            <option value="C+" selected="@(studentExam.Grade == "C+")">C+</option>
                                            <option value="C" selected="@(studentExam.Grade == "C")">C</option>
                                            <option value="C-" selected="@(studentExam.Grade == "C-")">C-</option>
                                            <option value="D" selected="@(studentExam.Grade == "D")">D</option>
                                            <option value="F" selected="@(studentExam.Grade == "F")">F</option>
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-select form-select-sm result" 
                                            data-field="result"
                                            @(studentExam.AttendanceStatus == "Present" || studentExam.AttendanceStatus == "Late" ? "" : "disabled")>
                                            <option value="">-</option>
                                            <option value="Pass" selected="@(studentExam.Result == "Pass")">Pass</option>
                                            <option value="Fail" selected="@(studentExam.Result == "Fail")">Fail</option>
                                        </select>
                                    </td>
                                    <td>
                                        <textarea class="form-control form-control-sm teacher-notes" 
                                            data-field="teacherNotes" 
                                            rows="2" 
                                            placeholder="Enter notes..."
                                            @(studentExam.AttendanceStatus == "Present" || studentExam.AttendanceStatus == "Late" ? "" : "disabled")>@studentExam.TeacherNotes</textarea>
                                    </td>
                                    <td>
                                        <div class="btn-group-vertical btn-group-sm">
                                            <button type="button" class="btn btn-success btn-sm" 
                                                onclick="saveStudentResult(@studentExam.StudentExaminationId)"
                                                title="Save Result">
                                                <i class="fas fa-save"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-info btn-sm" 
                                                onclick="previewResult(@studentExam.StudentExaminationId)"
                                                title="Preview">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-user-times fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No Students Registered</h5>
                    <p class="text-muted">No students have been registered for this examination yet.</p>
                    <a href="@Url.Action("ManageStudents", "Examination", new { examinationId = examination.ExaminationId })" 
                       class="btn btn-primary">
                        <i class="fas fa-users me-2"></i>Manage Students
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Preview Result Modal -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Result Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="previewContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" onclick="saveFromPreview()">
                    <i class="fas fa-save me-2"></i>Save Result
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .student-avatar {
        width: 32px;
        height: 32px;
        background: var(--primary-color);
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 11px;
    }

    .table td {
        vertical-align: middle;
        padding: 0.5rem;
    }

    .form-control-sm, .form-select-sm {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
    }

    .btn-group-vertical .btn {
        margin-bottom: 2px;
    }

    .btn-group-vertical .btn:last-child {
        margin-bottom: 0;
    }

    .card-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .table-responsive {
        max-height: 600px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--gray-300) transparent;
    }

    .table-responsive::-webkit-scrollbar {
        height: 6px;
        width: 6px;
    }

    .table-responsive::-webkit-scrollbar-track {
        background: transparent;
    }

    .table-responsive::-webkit-scrollbar-thumb {
        background-color: var(--gray-300);
        border-radius: 3px;
    }

    .table thead th {
        position: sticky;
        top: 0;
        background: var(--gray-100);
        z-index: 10;
        border-bottom: 2px solid var(--gray-300);
    }

    @@media (max-width: 768px) {
        .table-responsive {
            font-size: 0.75rem;
        }

        .student-avatar {
            width: 28px;
            height: 28px;
            font-size: 10px;
        }

        .btn-group-vertical .btn {
            padding: 0.25rem 0.5rem;
        }
    }
</style>

<script>
    let currentPreviewId = null;

    function updateResultFields(element) {
        const row = element.closest('tr');
        const attendanceStatus = element.value;
        const timeFields = row.querySelectorAll('.start-time, .end-time');
        const scoreField = row.querySelector('.score');
        const gradeField = row.querySelector('.grade');
        const resultField = row.querySelector('.result');
        const notesField = row.querySelector('.teacher-notes');

        if (attendanceStatus === 'Present' || attendanceStatus === 'Late') {
            // Enable all fields
            timeFields.forEach(field => field.disabled = false);
            if (scoreField) scoreField.disabled = false;
            if (gradeField) gradeField.disabled = false;
            if (resultField) resultField.disabled = false;
            if (notesField) notesField.disabled = false;

            // Set default times if empty
            const startTimeField = row.querySelector('.start-time');
            const endTimeField = row.querySelector('.end-time');
            
            if (startTimeField && !startTimeField.value) {
                startTimeField.value = '@examination.StartTime.ToString(@"HH\:mm")';
            }
            if (endTimeField && !endTimeField.value) {
                endTimeField.value = '@examination.EndTime.ToString(@"HH\:mm")';
            }

        } else {
            // Disable and clear fields for absent students
            timeFields.forEach(field => {
                field.disabled = true;
                field.value = '';
            });
            
            if (scoreField) {
                scoreField.disabled = true;
                scoreField.value = '';
            }
            if (gradeField) {
                gradeField.disabled = true;
                gradeField.value = '';
            }
            if (resultField) {
                resultField.disabled = true;
                resultField.value = '';
            }
            if (notesField) {
                notesField.disabled = true;
                notesField.value = '';
            }
        }
    }

    function calculateGrade(scoreInput) {
        const score = parseFloat(scoreInput.value);
        const row = scoreInput.closest('tr');
        const gradeField = row.querySelector('.grade');
        const resultField = row.querySelector('.result');

        if (!isNaN(score) && gradeField && resultField) {
            let grade = '';
            let result = '';

            if (score >= 95) grade = 'A+';
            else if (score >= 90) grade = 'A';
            else if (score >= 85) grade = 'A-';
            else if (score >= 80) grade = 'B+';
            else if (score >= 75) grade = 'B';
            else if (score >= 70) grade = 'B-';
            else if (score >= 65) grade = 'C+';
            else if (score >= 60) grade = 'C';
            else if (score >= 55) grade = 'C-';
            else if (score >= 50) grade = 'D';
            else grade = 'F';

            result = score >= 60 ? 'Pass' : 'Fail';

            gradeField.value = grade;
            resultField.value = result;
        }
    }

    function collectStudentData(row) {
        const studentExamId = row.getAttribute('data-student-exam-id');
        const attendanceStatus = row.querySelector('.attendance-status').value;
        const startTime = row.querySelector('.start-time').value;
        const endTime = row.querySelector('.end-time').value;
        const score = row.querySelector('.score').value;
        const grade = row.querySelector('.grade').value;
        const result = row.querySelector('.result').value;
        const teacherNotes = row.querySelector('.teacher-notes').value;

        console.log("studentExamId: " + studentExamId);
        console.log("attendanceStatus: " + attendanceStatus);
        console.log("startTime: " + startTime);
        console.log("endTime: " + endTime);
        console.log("score: " + score);
        console.log("grade: " + grade);
        console.log("result: " + result);
        console.log("teacherNotes: " + teacherNotes);

        return {
            StudentExaminationId: parseInt(studentExamId),
            AttendanceStatus: attendanceStatus || null,
            StartTime: startTime ? startTime + ":00" : null,
            EndTime: endTime ? endTime + ":00" : null,
            Score: score ? parseFloat(score) : null,
            MaxScore: 100,
            Grade: grade || null,
            Result: result || null,
            TeacherNotes: teacherNotes || null
        };
    }

    async function saveStudentResult(studentExamId) {
        try {
            const row = document.querySelector(`tr[data-student-exam-id="${studentExamId}"]`);
            const data = collectStudentData(row);

            const response = await fetch('@Url.Action("SaveResult", "Examination")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json', // Pastikan ini ada
                    'Accept': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                // Add visual indicator that result is saved
                row.style.backgroundColor = '#d4edda';
                setTimeout(() => {
                    row.style.backgroundColor = '';
                }, 2000);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving result:', error);
            showAlert('Error saving student result', 'error');
        }
    }

    async function saveAllResults() {
        if (!confirm('Save all student results? This will save all visible data.')) return;

        const rows = document.querySelectorAll('#resultsTable tbody tr[data-student-exam-id]');
        let saved = 0;
        let errors = 0;

        for (const row of rows) {
            try {
                const studentExamId = row.getAttribute('data-student-exam-id');
                const data = collectStudentData(row);

                const response = await fetch('@Url.Action("SaveResult", "Examination")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                if (result.success) {
                    saved++;
                    row.style.backgroundColor = '#d4edda';
                } else {
                    errors++;
                    row.style.backgroundColor = '#f8d7da';
                    console.error('Save error:', result.message);
                }
            } catch (error) {
                errors++;
                row.style.backgroundColor = '#f8d7da';
                console.error('Save error:', error);
            }

            // Small delay between saves
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        // Clear background colors after delay
        setTimeout(() => {
            rows.forEach(row => row.style.backgroundColor = '');
        }, 3000);

        showAlert(`Saved: ${saved}, Errors: ${errors}`, saved > 0 ? 'success' : 'error');
    }

    function markAllPresent() {
        if (!confirm('Mark all students as present and set default times?')) return;

        const rows = document.querySelectorAll('#resultsTable tbody tr[data-student-exam-id]');
        
        rows.forEach(row => {
            const attendanceSelect = row.querySelector('.attendance-status');
            if (attendanceSelect) {
                attendanceSelect.value = 'Present';
                updateResultFields(attendanceSelect);
            }
        });

        showAlert('All students marked as present', 'success');
    }

    function previewResult(studentExamId) {
        const row = document.querySelector(`tr[data-student-exam-id="${studentExamId}"]`);
        const data = collectStudentData(row);
        const studentName = row.querySelector('.fw-semibold').textContent;

        currentPreviewId = studentExamId;

        document.getElementById('previewContent').innerHTML = `
            <div class="result-preview">
                <h6 class="text-primary mb-3">${studentName}</h6>
                <div class="row g-2">
                    <div class="col-6">
                        <strong>Attendance:</strong><br>
                        <span class="badge bg-${data.attendanceStatus === 'Present' ? 'success' : data.attendanceStatus === 'Late' ? 'warning' : 'danger'}">
                            ${data.attendanceStatus || 'Not Set'}
                        </span>
                    </div>
                    <div class="col-6">
                        <strong>Time:</strong><br>
                        ${data.startTime || '-'} - ${data.endTime || '-'}
                    </div>
                    <div class="col-6">
                        <strong>Score:</strong><br>
                        ${data.score || 0}/100
                    </div>
                    <div class="col-6">
                        <strong>Grade:</strong><br>
                        <span class="badge bg-primary">${data.grade || '-'}</span>
                    </div>
                    <div class="col-6">
                        <strong>Result:</strong><br>
                        <span class="badge bg-${data.result === 'Pass' ? 'success' : data.result === 'Fail' ? 'danger' : 'secondary'}">
                            ${data.result || 'Not Set'}
                        </span>
                    </div>
                    ${data.teacherNotes ? `
                    <div class="col-12 mt-2">
                        <strong>Teacher Notes:</strong><br>
                        <div class="bg-light p-2 rounded">${data.teacherNotes}</div>
                    </div>` : ''}
                </div>
            </div>
        `;

        const modal = new bootstrap.Modal(document.getElementById('previewModal'));
        modal.show();
    }

    function saveFromPreview() {
        if (currentPreviewId) {
            saveStudentResult(currentPreviewId);
            bootstrap.Modal.getInstance(document.getElementById('previewModal')).hide();
        }
    }

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    // Initialize form when page loads
    document.addEventListener('DOMContentLoaded', function() {
        // Set up initial field states based on existing attendance status
        const attendanceSelects = document.querySelectorAll('.attendance-status');
        attendanceSelects.forEach(select => {
            if (select.value) {
                updateResultFields(select);
            }
        });
    });
</script>