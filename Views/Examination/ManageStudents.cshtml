@{
    ViewData["Title"] = "Manage Students - " + ViewBag.Examination.ExamName;
    ViewData["Breadcrumb"] = "Manage Students";
    var examination = (KMSI.Models.Examination)ViewBag.Examination;
    var availableStudents = (IEnumerable<KMSI.Models.Student>)ViewBag.AvailableStudents;
    var registeredStudents = (IList<KMSI.Models.StudentExamination>)ViewBag.RegisteredStudents;
}

<div class="manage-students">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Manage Students</h1>
            <p class="text-muted">Register students for @examination.ExamName</p>
        </div>
        <a href="@Url.Action("Index", "Examination")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i>Back to Examinations
        </a>
    </div>

    <!-- Examination Info -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-info-circle text-primary me-2"></i>Examination Details
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <strong>Exam Code:</strong><br>
                    <span class="text-primary">@examination.ExamCode</span>
                </div>
                <div class="col-md-3">
                    <strong>Grade:</strong><br>
                    <span class="badge bg-primary">@examination.Grade?.GradeName</span>
                </div>
                <div class="col-md-3">
                    <strong>Date & Time:</strong><br>
                    @examination.ExamDate.ToString("dd/MM/yyyy")<br>
                    <small class="text-muted">@examination.StartTime.ToString(@"HH\:mm") - @examination.EndTime.ToString(@"HH\:mm")</small>
                </div>
                <div class="col-md-3">
                    <strong>Capacity:</strong><br>
                    <div class="d-flex align-items-center">
                        <span class="me-2">@registeredStudents.Count()/@examination.MaxCapacity</span>
                        <div class="progress flex-grow-1" style="height: 6px;">
                            @{
                                var capacity = examination.MaxCapacity > 0 ? (registeredStudents.Count() * 100 / examination.MaxCapacity) : 0;
                            }
                            <div class="progress-bar @(capacity >= 100 ? "bg-success" : capacity >= 80 ? "bg-warning" : "bg-info")"
                                 style="width: @Math.Min(capacity, 100)%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Available Students -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-users text-success me-2"></i>Available Students
                        </h5>
                        <span class="badge bg-success">@availableStudents.Count() students</span>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (availableStudents.Any())
                    {
                        <div class="mb-3 p-3 border-bottom">
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" id="searchAvailable" placeholder="Search available students...">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                            </div>
                        </div>

                        <div class="student-list" style="max-height: 500px; overflow-y: auto;">
                            @foreach (var student in availableStudents)
                            {
                                <div class="student-item p-3 border-bottom" data-student-name="@student.FirstName @student.LastName @student.StudentCode">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <div class="student-avatar me-3">
                                                @student.FirstName.Substring(0, 1)@student.LastName.Substring(0, 1)
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@student.FirstName @student.LastName</div>
                                                <small class="text-muted">@student.StudentCode</small>
                                            </div>
                                        </div>
                                        <button type="button" class="btn btn-success btn-sm"
                                                onclick="registerStudent(@examination.ExaminationId, @student.StudentId, '@student.FirstName @student.LastName')"
                                        @(registeredStudents.Count() >= examination.MaxCapacity ? "disabled title='Exam capacity full'" : "")>
                                            <i class="fas fa-plus me-1"></i>Register
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-user-slash fa-3x mb-3 opacity-50"></i>
                            <p>No available students for this grade</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Registered Students -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-user-check text-primary me-2"></i>Registered Students
                        </h5>
                        <span class="badge bg-primary">@registeredStudents.Count() students</span>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- Always show search input -->
                    <div class="mb-3 p-3 border-bottom">
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" id="searchRegistered"
                                   placeholder="Search registered students..."
                            @(registeredStudents.Any() ? "" : "disabled")>
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                        </div>
                    </div>

                    @if (registeredStudents.Any())
                    {
                        <div class="student-list" style="max-height: 500px; overflow-y: auto;">
                            @foreach (var studentExam in registeredStudents.OrderBy(r => r.RegistrationDate))
                            {
                                <div class="student-item p-3 border-bottom" data-student-name="@studentExam.Student?.FirstName @studentExam.Student?.LastName @studentExam.Student?.StudentCode">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="d-flex align-items-center">
                                            <div class="student-avatar me-3">
                                                @studentExam.Student?.FirstName?.Substring(0, 1)@studentExam.Student?.LastName?.Substring(0, 1)
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@studentExam.Student?.FirstName @studentExam.Student?.LastName</div>
                                                <small class="text-muted">@studentExam.Student?.StudentCode</small>
                                                <br>
                                                <small class="text-success">
                                                    <i class="fas fa-calendar-plus me-1"></i>
                                                    Registered: @studentExam.RegistrationDate?.ToString("dd/MM/yyyy HH:mm")
                                                </small>
                                                @if (studentExam.Score.HasValue)
                                                {
                                                    <br>
                                                    <small class="text-info">
                                                        <i class="fas fa-star me-1"></i>
                                                        Score: @studentExam.Score/@studentExam.MaxScore (@studentExam.Grade)
                                                    </small>
                                                }
                                            </div>
                                        </div>
                                        <div class="btn-group-vertical btn-group-sm">
                                            @if (studentExam.Score.HasValue)
                                            {
                                                <button type="button" class="btn btn-outline-info btn-sm"
                                                        onclick="viewExamResult(@studentExam.StudentExaminationId)"
                                                        title="View Result">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            }
                                            <button type="button" class="btn btn-outline-danger btn-sm"
                                                    onclick="unregisterStudent(@examination.ExaminationId, @studentExam.StudentId, '@studentExam.Student?.FirstName @studentExam.Student?.LastName')"
                                            @(studentExam.Score.HasValue ? "disabled title='Cannot unregister - exam taken'" : "")>
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-user-times fa-3x mb-3 opacity-50"></i>
                            <p>No students registered yet</p>
                            <small>Register students from the available list</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- View Result Modal -->
<div class="modal fade" id="resultModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Exam Result</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="resultContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .student-avatar {
        width: 40px;
        height: 40px;
        background: var(--primary-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 14px;
    }

    .student-item {
        transition: all 0.2s ease;
    }

        .student-item:hover {
            background-color: var(--gray-50);
        }

    .card-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .progress {
        border-radius: 10px;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-vertical .btn {
        margin-bottom: 2px;
    }

        .btn-group-vertical .btn:last-child {
            margin-bottom: 0;
        }

    .student-list {
        scrollbar-width: thin;
        scrollbar-color: var(--gray-300) transparent;
    }

        .student-list::-webkit-scrollbar {
            width: 6px;
        }

        .student-list::-webkit-scrollbar-track {
            background: transparent;
        }

        .student-list::-webkit-scrollbar-thumb {
            background-color: var(--gray-300);
            border-radius: 3px;
        }

    @@media (max-width: 768px) {
        .col-md-6
    {
        margin-bottom: 1rem;
    }

    .student-item {
        padding: 1rem !important;
    }

    .student-avatar {
        width: 32px;
        height: 32px;
        font-size: 12px;
    }

    }
</style>

<script>
    async function registerStudent(examinationId, studentId, studentName) {
        if (confirm(`Register ${studentName} for this examination?`)) {
            try {
                const response = await fetch('@Url.Action("RegisterStudent", "Examination")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `examinationId=${examinationId}&studentId=${studentId}`
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error registering student:', error);
                showAlert('Error registering student', 'error');
            }
        }
    }

    async function unregisterStudent(examinationId, studentId, studentName) {
        if (confirm(`Unregister ${studentName} from this examination?`)) {
            try {
                const response = await fetch('@Url.Action("UnregisterStudent", "Examination")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `examinationId=${examinationId}&studentId=${studentId}`
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error unregistering student:', error);
                showAlert('Error unregistering student', 'error');
            }
        }
    }

    async function viewExamResult(studentExaminationId) {
        try {
            const response = await fetch(`@Url.Action("GetStudentExamResult", "Examination")?id=${studentExaminationId}`);
            const result = await response.json();

            if (result.success) {
                const data = result.data;
                document.getElementById('resultContent').innerHTML = `
                    <div class="row g-3">
                        <div class="col-6">
                            <strong>Student:</strong><br>
                            ${data.studentName}
                        </div>
                        <div class="col-6">
                            <strong>Status:</strong><br>
                            <span class="badge bg-${data.attendanceStatus === 'Present' ? 'success' : 'danger'}">${data.attendanceStatus || 'Not Set'}</span>
                        </div>
                        ${data.startTime ? `
                        <div class="col-6">
                            <strong>Start Time:</strong><br>
                            ${data.startTime}
                        </div>
                        <div class="col-6">
                            <strong>End Time:</strong><br>
                            ${data.endTime || '-'}
                        </div>` : ''}
                        <div class="col-6">
                            <strong>Score:</strong><br>
                            ${data.score || 0}/${data.maxScore || 100}
                        </div>
                        <div class="col-6">
                            <strong>Grade:</strong><br>
                            <span class="badge bg-primary">${data.grade || '-'}</span>
                        </div>
                        <div class="col-6">
                            <strong>Result:</strong><br>
                            <span class="badge bg-${data.result === 'Pass' ? 'success' : data.result === 'Fail' ? 'danger' : 'secondary'}">${data.result || 'Not Set'}</span>
                        </div>
                        ${data.teacherNotes ? `
                        <div class="col-12">
                            <strong>Teacher Notes:</strong><br>
                            ${data.teacherNotes}
                        </div>` : ''}
                    </div>
                `;

                const modal = new bootstrap.Modal(document.getElementById('resultModal'));
                modal.show();
            } else {
                showAlert('Error loading exam result', 'error');
            }
        } catch (error) {
            console.error('Error loading exam result:', error);
            showAlert('Error loading exam result', 'error');
        }
    }

    // Search functionality
    document.getElementById('searchAvailable').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const students = document.querySelectorAll('.col-md-6:first-child .student-item');

        students.forEach(student => {
            const name = student.getAttribute('data-student-name').toLowerCase();
            student.style.display = name.includes(searchTerm) ? 'block' : 'none';
        });
    });

    document.getElementById('searchRegistered').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const students = document.querySelectorAll('.col-md-6:last-child .student-item');

        students.forEach(student => {
            const name = student.getAttribute('data-student-name').toLowerCase();
            student.style.display = name.includes(searchTerm) ? 'block' : 'none';
        });
    });

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }
</script>