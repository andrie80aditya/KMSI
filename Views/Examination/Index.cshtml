@model IEnumerable<KMSI.Models.Examination>
@{
    ViewData["Title"] = "Examination Management";
    ViewData["Breadcrumb"] = "Examination Management";
}

<div class="examination-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Examination Management</h1>
            <p class="text-muted">Schedule and manage student examinations</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openExaminationModal()">
            <i class="fas fa-plus me-2"></i>Schedule Examination
        </button>
    </div>

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count()</h5>
                            <small>Total Examinations</small>
                        </div>
                        <i class="fas fa-clipboard-list fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count(e => e.Status == "Scheduled")</h5>
                            <small>Scheduled</small>
                        </div>
                        <i class="fas fa-calendar-alt fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count(e => e.Status == "In Progress")</h5>
                            <small>In Progress</small>
                        </div>
                        <i class="fas fa-clock fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count(e => e.Status == "Completed")</h5>
                            <small>Completed</small>
                        </div>
                        <i class="fas fa-check-circle fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Examinations Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Examinations List</h5>
                </div>
                <div class="col-auto">
                    <div class="d-flex gap-2 align-items-center">
                        <select id="statusFilter" class="form-select form-select-sm" onchange="filterExaminations()">
                            <option value="">All Status</option>
                            <option value="Scheduled">Scheduled</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                        <div class="input-group input-group-sm" style="width: 250px;">
                            <input type="text" class="form-control" id="searchExaminations" placeholder="Search examinations...">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="examinationsTable">
                    <thead class="table-light">
                        <tr>
                            <th>Exam Code</th>
                            <th>Exam Name</th>
                            <th>Grade</th>
                            <th>Date & Time</th>
                            <th>Location</th>
                            <th>Examiner</th>
                            <th>Capacity</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var examination in Model)
                        {
                            <tr>
                                <td>
                                    <div class="fw-semibold">@examination.ExamCode</div>
                                    <small class="text-muted">@examination.Site?.SiteName</small>
                                </td>
                                <td>
                                    <div>@examination.ExamName</div>
                                    @if (!string.IsNullOrEmpty(examination.Description))
                                    {
                                        <small class="text-muted" title="@examination.Description">
                                            @(examination.Description.Length > 50 ? examination.Description.Substring(0, 50) + "..." : examination.Description)
                                        </small>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-primary">@examination.Grade?.GradeName</span>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-semibold">@examination.ExamDate.ToString("dd/MM/yyyy")</div>
                                        <small class="text-muted">
                                            @examination.StartTime.ToString(@"HH\:mm") - @examination.EndTime.ToString(@"HH\:mm")
                                        </small>
                                    </div>
                                </td>
                                <td>
                                    @(examination.Location ?? "-")
                                </td>
                                <td>
                                    <div>
                                        <div>@examination.ExaminerTeacher?.User?.FirstName @examination.ExaminerTeacher?.User?.LastName</div>
                                        <small class="text-muted">@examination.ExaminerTeacher?.TeacherCode</small>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <span class="me-2">@(examination.StudentExaminations?.Count ?? 0)/@examination.MaxCapacity</span>
                                        <div class="progress" style="width: 60px; height: 6px;">
                                            @{
                                                var registeredCount = examination.StudentExaminations?.Count ?? 0;
                                                var percentage = examination.MaxCapacity > 0 ? (registeredCount * 100 / examination.MaxCapacity) : 0;
                                            }
                                            <div class="progress-bar @(percentage >= 100 ? "bg-success" : percentage >= 80 ? "bg-warning" : "bg-info")"
                                                 style="width: @Math.Min(percentage, 100)%"></div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @switch (examination.Status)
                                    {
                                        case "Scheduled":
                                            <span class="badge bg-warning text-dark">Scheduled</span>
                                            break;
                                        case "In Progress":
                                            <span class="badge bg-info">In Progress</span>
                                            break;
                                        case "Completed":
                                            <span class="badge bg-success">Completed</span>
                                            break;
                                        case "Cancelled":
                                            <span class="badge bg-danger">Cancelled</span>
                                            break;
                                        default:
                                            <span class="badge bg-secondary">@examination.Status</span>
                                            break;
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-cog"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <a class="dropdown-item" href="#" onclick="editExamination(@examination.ExaminationId)">
                                                    <i class="fas fa-edit me-2"></i>Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item" href="@Url.Action("ManageStudents", "Examination", new { examinationId = examination.ExaminationId })">
                                                    <i class="fas fa-users me-2"></i>Manage Students
                                                </a>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                            @if (examination.Status == "Scheduled")
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="changeStatus(@examination.ExaminationId, 'In Progress')">
                                                        <i class="fas fa-play me-2"></i>Start Exam
                                                    </a>
                                                </li>
                                            }
                                            @if (examination.Status == "In Progress")
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="@Url.Action("EnterResults", "Examination", new { examinationId = examination.ExaminationId })">
                                                        <i class="fas fa-clipboard-check me-2"></i>Enter Results
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="changeStatus(@examination.ExaminationId, 'Completed')">
                                                        <i class="fas fa-check me-2"></i>Complete Exam
                                                    </a>
                                                </li>
                                            }
                                            @if (examination.Status == "Scheduled")
                                            {
                                                <li>
                                                    <a class="dropdown-item text-danger" href="#" onclick="changeStatus(@examination.ExaminationId, 'Cancelled')">
                                                        <i class="fas fa-times me-2"></i>Cancel Exam
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item text-danger" href="#" onclick="deleteExamination(@examination.ExaminationId, '@examination.ExamName')">
                                                        <i class="fas fa-trash me-2"></i>Delete
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Examination Modal -->
<div class="modal fade" id="examinationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Schedule Examination</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="examinationForm">
                <div class="modal-body">
                    <input type="hidden" id="examinationId" name="examinationId" value="0">

                    <div class="row g-3">
                        <!-- Basic Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-info-circle me-2"></i>Basic Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="examCode" class="form-label">Exam Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="examCode" name="examCode" required placeholder="e.g., EX001">
                        </div>

                        <div class="col-md-6">
                            <label for="examName" class="form-label">Exam Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="examName" name="examName" required placeholder="e.g., Piano Grade 1 Exam">
                        </div>

                        <div class="col-md-4">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required onchange="loadCompanyDependentData()">
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="siteId" class="form-label">Site <span class="text-danger">*</span></label>
                            <select class="form-select" id="siteId" name="siteId" required>
                                <option value="">Select Site</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="gradeId" class="form-label">Grade <span class="text-danger">*</span></label>
                            <select class="form-select" id="gradeId" name="gradeId" required>
                                <option value="">Select Grade</option>
                            </select>
                        </div>

                        <!-- Schedule Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-calendar-alt me-2"></i>Schedule Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="examDate" class="form-label">Exam Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="examDate" name="examDate" required>
                        </div>

                        <div class="col-md-4">
                            <label for="startTime" class="form-label">Start Time <span class="text-danger">*</span></label>
                            <input type="time" class="form-control" id="startTime" name="startTime" required>
                        </div>

                        <div class="col-md-4">
                            <label for="endTime" class="form-label">End Time <span class="text-danger">*</span></label>
                            <input type="time" class="form-control" id="endTime" name="endTime" required>
                        </div>

                        <div class="col-md-6">
                            <label for="location" class="form-label">Location</label>
                            <input type="text" class="form-control" id="location" name="location" placeholder="e.g., Room A, Hall 1">
                        </div>

                        <div class="col-md-6">
                            <label for="maxCapacity" class="form-label">Max Capacity <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="maxCapacity" name="maxCapacity" required value="10" min="1" max="50">
                        </div>

                        <!-- Examiner Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user-tie me-2"></i>Examiner Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="examinerTeacherId" class="form-label">Examiner <span class="text-danger">*</span></label>
                            <select class="form-select" id="examinerTeacherId" name="examinerTeacherId" required>
                                <option value="">Select Examiner</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="status" class="form-label">Status <span class="text-danger">*</span></label>
                            <select class="form-select" id="status" name="status" required>
                                <option value="Scheduled">Scheduled</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </div>

                        <div class="col-12">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Additional notes about this examination..."></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Examination
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .table td {
        vertical-align: middle;
        padding: 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .progress {
        border-radius: 10px;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    .card {
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
    }

    .card-header .badge {
        font-size: 0.7rem;
    }

    .dropdown-menu {
        min-width: 160px;
    }

    .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

        .dropdown-item i {
            width: 16px;
        }

    @@media (max-width: 768px) {
        .table-responsive

    {
        font-size: 0.875rem;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    .dropdown-menu {
        min-width: 140px;
    }

    }
</style>

<script>
    function resetDependentDropdowns() {
        // Reset Sites
        const siteSelect = document.getElementById('siteId');
        if (siteSelect) {
            siteSelect.innerHTML = '<option value="">Select Site</option>';
            siteSelect.disabled = true;
        }

        // Reset Grades
        const gradeSelect = document.getElementById('gradeId');
        if (gradeSelect) {
            gradeSelect.innerHTML = '<option value="">Select Grade</option>';
            gradeSelect.disabled = true;
        }

        // Reset Teachers
        const teacherSelect = document.getElementById('examinerTeacherId');
        if (teacherSelect) {
            teacherSelect.innerHTML = '<option value="">Select Examiner</option>';
            teacherSelect.disabled = true;
        }
    }

    async function loadCompanyDependentData() {
        const companyId = document.getElementById('companyId').value;

        // Reset dropdown terlebih dahulu
        resetDependentDropdowns();

        if (companyId) {
            try {
                // Load data secara parallel
                await Promise.all([
                    loadExamSites(),
                    loadExamGrades(),
                    loadExamTeachers()
                ]);

                // Enable dropdown setelah data berhasil dimuat
                const siteSelect = document.getElementById('siteId');
                const gradeSelect = document.getElementById('gradeId');
                const teacherSelect = document.getElementById('examinerTeacherId');

                if (siteSelect) siteSelect.disabled = false;
                if (gradeSelect) gradeSelect.disabled = false;
                if (teacherSelect) teacherSelect.disabled = false;

            } catch (error) {
                console.error('Error loading company dependent data:', error);
                showAlert('Error loading data for selected company', 'error');
            }
        }
    }

    let isEditMode = false;

    function openExaminationModal(examinationId = null) {
        isEditMode = !!examinationId;
        const modal = new bootstrap.Modal(document.getElementById('examinationModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit Examination';
            loadExaminationData(examinationId);
        } else {
            document.getElementById('modalTitle').textContent = 'Schedule Examination';
            document.getElementById('examinationForm').reset();
            document.getElementById('examinationId').value = '0';
            document.getElementById('examDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('startTime').value = '09:00';
            document.getElementById('endTime').value = '11:00';
            document.getElementById('maxCapacity').value = '10';
            document.getElementById('status').value = 'Scheduled';
        }

        modal.show();
    }

    function editExamination(examinationId) {
        openExaminationModal(examinationId);
    }

    async function loadExaminationData(examinationId) {
        try {
            const response = await fetch(`@Url.Action("GetExamination", "Examination")?id=${examinationId}`);
            if (!response.ok) {
                throw new Error('Failed to load examination data');
            }

            const examination = await response.json();

            // Set basic data first
            document.getElementById('examinationId').value = examination.examinationId;
            document.getElementById('examCode').value = examination.examCode;
            document.getElementById('examName').value = examination.examName;
            document.getElementById('companyId').value = examination.companyId;
            document.getElementById('examDate').value = examination.examDate;
            document.getElementById('startTime').value = examination.startTime;
            document.getElementById('endTime').value = examination.endTime;
            document.getElementById('location').value = examination.location || '';
            document.getElementById('maxCapacity').value = examination.maxCapacity;
            document.getElementById('status').value = examination.status;
            document.getElementById('description').value = examination.description || '';

            // Load company dependent data and enable dropdowns
            await loadCompanyDependentData();

            // Set dropdown values after data is loaded
            document.getElementById('siteId').value = examination.siteId;
            document.getElementById('gradeId').value = examination.gradeId;
            document.getElementById('examinerTeacherId').value = examination.examinerTeacherId;

        } catch (error) {
            console.error('Error loading examination:', error);
            showAlert('Error loading examination data', 'error');
        }
    }

    async function loadExamSites() {
        const companyId = document.getElementById('companyId').value;
        const siteSelect = document.getElementById('siteId');

        if (companyId && siteSelect) {
            siteSelect.innerHTML = '<option value="">Select Site</option>';

            try {
                const response = await fetch(`@Url.Action("GetSitesByCompany", "Examination")?companyId=${companyId}`);
                if (response.ok) {
                    const sites = await response.json();

                    sites.forEach(site => {
                        const option = document.createElement('option');
                        option.value = site.value;
                        option.textContent = site.text;
                        siteSelect.appendChild(option);
                    });
                } else {
                    throw new Error('Failed to load sites');
                }
            } catch (error) {
                console.error('Error loading sites:', error);
                showAlert('Error loading sites', 'error');
            }
        }
    }

    async function loadExamGrades() {
        const companyId = document.getElementById('companyId').value;
        const gradeSelect = document.getElementById('gradeId');

        if (companyId && gradeSelect) {
            // Clear existing options first
            gradeSelect.innerHTML = '<option value="">Select Grade</option>';

            try {
                const response = await fetch(`@Url.Action("GetGradesByCompany", "Examination")?companyId=${companyId}`);
                if (response.ok) {
                    const grades = await response.json();

                    grades.forEach(grade => {
                        const option = document.createElement('option');
                        option.value = grade.value;
                        option.textContent = grade.text;
                        gradeSelect.appendChild(option);
                    });
                } else {
                    throw new Error('Failed to load grades');
                }
            } catch (error) {
                console.error('Error loading grades:', error);
                showAlert('Error loading grades', 'error');
            }
        }
    }

    async function loadExamTeachers() {
        const companyId = document.getElementById('companyId').value;
        const teacherSelect = document.getElementById('examinerTeacherId');

        teacherSelect.innerHTML = '<option value="">Select Examiner</option>';

        if (companyId) {
            try {
                const response = await fetch(`@Url.Action("GetTeachersByCompany", "Examination")?companyId=${companyId}`);
                const teachers = await response.json();

                teachers.forEach(teacher => {
                    const option = document.createElement('option');
                    option.value = teacher.value;
                    option.textContent = teacher.text;
                    teacherSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }
    }

    document.getElementById('examinationForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        // Ensure all dropdowns are enabled before submitting
        document.getElementById('siteId').disabled = false;
        document.getElementById('gradeId').disabled = false;
        document.getElementById('examinerTeacherId').disabled = false;

        const formData = new FormData(this);
        const url = isEditMode ? '@Url.Action("Update", "Examination")' : '@Url.Action("Create", "Examination")';

        // Debug: Log form data
        console.log('Form data:');
        for (let [key, value] of formData.entries()) {
            console.log(key, value);
        }

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('examinationModal')).hide();
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving examination:', error);
            showAlert('Error saving examination', 'error');
        }
    });

    async function deleteExamination(examinationId, examName) {
        if (confirm(`Are you sure you want to delete examination "${examName}"?`)) {
            try {
                const response = await fetch(`@Url.Action("Delete", "Examination")?id=${examinationId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting examination:', error);
                showAlert('Error deleting examination', 'error');
            }
        }
    }

    async function changeStatus(examinationId, status) {
        const confirmMessage = status === 'Cancelled'
            ? 'Are you sure you want to cancel this examination?'
            : `Change status to ${status}?`;

        if (confirm(confirmMessage)) {
            try {
                const response = await fetch('@Url.Action("ChangeStatus", "Examination")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${examinationId}&status=${status}`
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error changing status:', error);
                showAlert('Error changing status', 'error');
            }
        }
    }

    // Search and filter functionality
    document.getElementById('searchExaminations').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        filterTable(searchTerm, document.getElementById('statusFilter').value);
    });

    function filterExaminations() {
        const searchTerm = document.getElementById('searchExaminations').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value;
        filterTable(searchTerm, statusFilter);
    }

    function filterTable(searchTerm, statusFilter) {
        const rows = document.querySelectorAll('#examinationsTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            const statusCell = row.cells[7]; // Status column
            const status = statusCell.textContent.trim();

            const matchesSearch = text.includes(searchTerm);
            const matchesStatus = !statusFilter || status.toLowerCase().includes(statusFilter.toLowerCase());

            row.style.display = matchesSearch && matchesStatus ? '' : 'none';
        });
    }

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    // Initialize with proper state on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Ensure dependent dropdowns start in disabled state
        resetDependentDropdowns();

        // Initialize tooltips if any
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>