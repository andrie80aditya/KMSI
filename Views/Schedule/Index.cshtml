@model IEnumerable<KMSI.Models.ClassSchedule>
@{
    ViewData["Title"] = "Schedule Management";
    ViewData["Breadcrumb"] = "Schedule Management";
}

<div class="schedule-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Schedule Management</h1>
            <p class="text-muted">Manage class schedules and lessons</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openScheduleModal()">
            <i class="fas fa-plus me-2"></i>Add New Schedule
        </button>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body py-3">
            <div class="row g-3 align-items-end">
                <div class="col-md-2">
                    <label for="filterStatus" class="form-label mb-1">Filter by Status</label>
                    <select class="form-select form-select-sm" id="filterStatus">
                        <option value="">All Status</option>
                        <option value="Scheduled">Scheduled</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Rescheduled">Rescheduled</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="filterType" class="form-label mb-1">Filter by Type</label>
                    <select class="form-select form-select-sm" id="filterType">
                        <option value="">All Types</option>
                        <option value="Regular">Regular</option>
                        <option value="Trial">Trial</option>
                        <option value="Makeup">Makeup</option>
                        <option value="Extra">Extra</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="filterDate" class="form-label mb-1">Filter by Date</label>
                    <input type="date" class="form-control form-control-sm" id="filterDate">
                </div>
                <div class="col-md-4">
                    <label for="searchSchedules" class="form-label mb-1">Search Schedules</label>
                    <input type="text" class="form-control form-control-sm" id="searchSchedules" placeholder="Search by student, teacher, or room...">
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm w-100" onclick="clearFilters()">
                        <i class="fas fa-times me-1"></i>Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Schedules Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Class Schedules</h5>
                </div>
                <div class="col-auto">
                    <span class="text-muted" id="scheduleCount">@Model.Count() schedules</span>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="schedulesTable">
                    <thead class="table-light">
                        <tr>
                            <th>Date & Time</th>
                            <th>Student</th>
                            <th>Teacher</th>
                            <th>Grade</th>
                            <th>Duration</th>
                            <th>Room</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var schedule in Model)
                        {
                            <tr data-status="@schedule.Status" data-type="@schedule.ScheduleType" data-date="@schedule.ScheduleDate.ToString("yyyy-MM-dd")">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="schedule-icon me-3">
                                            <i class="fas fa-calendar-alt"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@schedule.ScheduleDate.ToString("dd/MM/yyyy")</div>
                                            <small class="text-muted">@schedule.StartTime.ToString(@"hh\:mm") - @schedule.EndTime.ToString(@"hh\:mm")</small>
                                            @if (schedule.IsRecurring)
                                            {
                                                <div class="mt-1">
                                                    <span class="badge bg-info">Recurring</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-semibold">@schedule.Student?.FirstName @schedule.Student?.LastName</div>
                                        <small class="text-muted">@schedule.Student?.StudentCode</small>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-medium">@schedule.Teacher?.User?.FirstName @schedule.Teacher?.User?.LastName</div>
                                        <small class="text-muted">@schedule.Teacher?.TeacherCode</small>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-primary">@schedule.Grade?.GradeName</span>
                                </td>
                                <td>
                                    <span class="duration-text">@schedule.Duration min</span>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(schedule.Room))
                                    {
                                        <span class="room-badge">@schedule.Room</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @switch (schedule.ScheduleType)
                                    {
                                        case "Regular":
                                            <span class="badge bg-success">Regular</span>
                                            break;
                                        case "Trial":
                                            <span class="badge bg-info">Trial</span>
                                            break;
                                        case "Makeup":
                                            <span class="badge bg-warning">Makeup</span>
                                            break;
                                        case "Extra":
                                            <span class="badge bg-secondary">Extra</span>
                                            break;
                                        default:
                                            <span class="badge bg-light text-dark">@schedule.ScheduleType</span>
                                            break;
                                    }
                                </td>
                                <td>
                                    @switch (schedule.Status)
                                    {
                                        case "Scheduled":
                                            <span class="badge bg-primary">Scheduled</span>
                                            break;
                                        case "Completed":
                                            <span class="badge bg-success">Completed</span>
                                            break;
                                        case "Cancelled":
                                            <span class="badge bg-danger">Cancelled</span>
                                            break;
                                        case "Rescheduled":
                                            <span class="badge bg-warning">Rescheduled</span>
                                            break;
                                        default:
                                            <span class="badge bg-light text-dark">@schedule.Status</span>
                                            break;
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        @if (schedule.Status == "Scheduled")
                                        {
                                            <button type="button" class="btn btn-outline-success" onclick="markCompleted(@schedule.ClassScheduleId)" title="Mark as Completed">
                                                <i class="fas fa-check"></i>
                                            </button>
                                        }
                                        <button type="button" class="btn btn-outline-primary" onclick="editSchedule(@schedule.ClassScheduleId)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteSchedule(@schedule.ClassScheduleId, '@schedule.Student?.FirstName @schedule.Student?.LastName - @schedule.ScheduleDate.ToString("dd/MM/yyyy")')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New Schedule</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="scheduleForm">
                <div class="modal-body">
                    <input type="hidden" id="classScheduleId" name="classScheduleId" value="0">

                    <div class="row g-3">
                        <!-- Location Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-map-marker-alt me-2"></i>Location Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required onchange="loadSites();">
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="siteId" class="form-label">Site <span class="text-danger">*</span></label>
                            <select class="form-select" id="siteId" name="siteId" required onchange="loadStudents(); loadTeachers();">
                                <option value="">Select Site</option>
                            </select>
                        </div>

                        <!-- Participants Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-users me-2"></i>Participants Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="studentId" class="form-label">Student <span class="text-danger">*</span></label>
                            <select class="form-select" id="studentId" name="studentId" required onchange="loadStudentGrade();">
                                <option value="">Select Student</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="teacherId" class="form-label">Teacher <span class="text-danger">*</span></label>
                            <select class="form-select" id="teacherId" name="teacherId" required>
                                <option value="">Select Teacher</option>
                            </select>
                        </div>

                        <!-- Schedule Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-clock me-2"></i>Schedule Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="scheduleDate" class="form-label">Schedule Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="scheduleDate" name="scheduleDate" required onchange="checkAvailability();">
                        </div>

                        <div class="col-md-4">
                            <label for="startTime" class="form-label">Start Time <span class="text-danger">*</span></label>
                            <input type="time" class="form-control" id="startTime" name="startTime" required onchange="calculateDuration(); checkAvailability();">
                        </div>

                        <div class="col-md-4">
                            <label for="endTime" class="form-label">End Time <span class="text-danger">*</span></label>
                            <input type="time" class="form-control" id="endTime" name="endTime" required onchange="calculateDuration(); checkAvailability();">
                        </div>

                        <div class="col-md-6">
                            <label for="duration" class="form-label">Duration (Minutes)</label>
                            <input type="number" class="form-control" id="duration" name="duration" readonly>
                        </div>

                        <div class="col-md-6">
                            <label for="room" class="form-label">Room</label>
                            <input type="text" class="form-control" id="room" name="room" maxlength="50">
                        </div>

                        <!-- Class Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-graduation-cap me-2"></i>Class Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="gradeId" class="form-label">Grade <span class="text-danger">*</span></label>
                            <select class="form-select" id="gradeId" name="gradeId" required>
                                <option value="">Select Grade</option>
                                @foreach (var grade in ViewBag.Grades)
                                {
                                    <option value="@grade.GradeId">@grade.GradeName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="scheduleType" class="form-label">Schedule Type</label>
                            <select class="form-select" id="scheduleType" name="scheduleType">
                                <option value="Regular">Regular</option>
                                <option value="Trial">Trial</option>
                                <option value="Makeup">Makeup</option>
                                <option value="Extra">Extra</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status">
                                <option value="Scheduled">Scheduled</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Rescheduled">Rescheduled</option>
                            </select>
                        </div>

                        <!-- Recurrence Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-repeat me-2"></i>Recurrence Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="isRecurring" name="isRecurring" onchange="toggleRecurrence();">
                                <label class="form-check-label" for="isRecurring">
                                    Recurring Schedule
                                </label>
                            </div>
                        </div>

                        <div class="col-md-6" id="recurrencePatternDiv" style="display: none;">
                            <label for="recurrencePattern" class="form-label">Recurrence Pattern</label>
                            <select class="form-select" id="recurrencePattern" name="recurrencePattern">
                                <option value="">Select Pattern</option>
                                <option value="Weekly">Weekly (4 weeks)</option>
                                <option value="BiWeekly">Bi-Weekly (4 sessions)</option>
                            </select>
                        </div>

                        <div class="col-12">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3" maxlength="500"></textarea>
                        </div>

                        <!-- Availability Check Alert -->
                        <div class="col-12">
                            <div id="availabilityAlert" class="alert alert-warning" style="display: none;">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <span id="availabilityMessage"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveButton">
                        <i class="fas fa-save me-2"></i>Save Schedule
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .schedule-icon {
        width: 40px;
        height: 40px;
        background: var(--info-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 16px;
    }

    .duration-text {
        color: var(--primary-color);
        font-weight: 500;
    }

    .room-badge {
        background-color: var(--gray-100);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        color: var(--gray-700);
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-sm > .btn {
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    @@media (max-width: 768px) {
        .table-responsive
    {
        font-size: 0.875rem;
    }

    .schedule-icon {
        width: 32px;
        height: 32px;
        font-size: 14px;
    }

    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    }
</style>

<script>
    let isEditMode = false;

    function openScheduleModal(scheduleId = null) {
        isEditMode = !!scheduleId;
        const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit Schedule';
            loadScheduleData(scheduleId);
        } else {
            document.getElementById('modalTitle').textContent = 'Add New Schedule';
            document.getElementById('scheduleForm').reset();
            document.getElementById('classScheduleId').value = '0';
            document.getElementById('scheduleDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('scheduleType').value = 'Regular';
            document.getElementById('status').value = 'Scheduled';
            document.getElementById('isRecurring').checked = false;
            toggleRecurrence();
        }

        modal.show();
    }

    function editSchedule(scheduleId) {
        openScheduleModal(scheduleId);
    }

    async function loadScheduleData(scheduleId) {
        try {
            const response = await fetch('@Url.Action("GetSchedule", "Schedule")?id=' + scheduleId);
            const schedule = await response.json();

            document.getElementById('classScheduleId').value = schedule.classScheduleId;
            document.getElementById('companyId').value = schedule.companyId;
            document.getElementById('studentId').value = schedule.studentId;
            document.getElementById('teacherId').value = schedule.teacherId;
            document.getElementById('gradeId').value = schedule.gradeId;
            document.getElementById('scheduleDate').value = schedule.scheduleDate;
            document.getElementById('startTime').value = schedule.startTime;
            document.getElementById('endTime').value = schedule.endTime;
            document.getElementById('duration').value = schedule.duration;
            document.getElementById('scheduleType').value = schedule.scheduleType;
            document.getElementById('status').value = schedule.status;
            document.getElementById('room').value = schedule.room || '';
            document.getElementById('notes').value = schedule.notes || '';
            document.getElementById('isRecurring').checked = schedule.isRecurring;
            document.getElementById('recurrencePattern').value = schedule.recurrencePattern || '';

            // Load dependent dropdowns
            await loadSites();
            document.getElementById('siteId').value = schedule.siteId;

            await loadStudents();
            document.getElementById('studentId').value = schedule.studentId;

            await loadTeachers();
            document.getElementById('teacherId').value = schedule.teacherId;

            toggleRecurrence();
        } catch (error) {
            console.error('Error loading schedule:', error);
            showAlert('Error loading schedule data', 'error');
        }
    }

    async function loadSites() {
        const companyId = document.getElementById('companyId').value;
        const siteSelect = document.getElementById('siteId');

        siteSelect.innerHTML = '<option value="">Select Site</option>';

        if (companyId) {
            try {
                const response = await fetch('@Url.Action("GetSitesByCompany", "Schedule")?companyId=' + companyId);
                const sites = await response.json();

                sites.forEach(site => {
                    const option = document.createElement('option');
                    option.value = site.value;
                    option.textContent = site.text;
                    siteSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading sites:', error);
            }
        }
    }

    async function loadStudents() {
        const siteId = document.getElementById('siteId').value;
        const studentSelect = document.getElementById('studentId');

        studentSelect.innerHTML = '<option value="">Select Student</option>';

        if (siteId) {
            try {
                const response = await fetch('@Url.Action("GetStudentsBySite", "Schedule")?siteId=' + siteId);
                const students = await response.json();

                students.forEach(student => {
                    const option = document.createElement('option');
                    option.value = student.value;
                    option.textContent = student.text;
                    option.setAttribute('data-grade-id', student.gradeId || '');
                    studentSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading students:', error);
            }
        }
    }

    async function loadTeachers() {
        const siteId = document.getElementById('siteId').value;
        const teacherSelect = document.getElementById('teacherId');

        teacherSelect.innerHTML = '<option value="">Select Teacher</option>';

        if (siteId) {
            try {
                const response = await fetch('@Url.Action("GetTeachersBySite", "Schedule")?siteId=' + siteId);
                const teachers = await response.json();

                teachers.forEach(teacher => {
                    const option = document.createElement('option');
                    option.value = teacher.value;
                    option.textContent = teacher.text;
                    teacherSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }
    }

    function loadStudentGrade() {
        const studentSelect = document.getElementById('studentId');
        const selectedOption = studentSelect.options[studentSelect.selectedIndex];

        if (selectedOption.value) {
            const gradeId = selectedOption.getAttribute('data-grade-id');
            if (gradeId) {
                document.getElementById('gradeId').value = gradeId;
            }
        }

        checkAvailability();
    }

    function calculateDuration() {
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;

        if (startTime && endTime) {
            const start = new Date(`2000-01-01T${startTime}:00`);
            const end = new Date(`2000-01-01T${endTime}:00`);

            if (end > start) {
                const durationMs = end - start;
                const durationMinutes = Math.floor(durationMs / (1000 * 60));
                document.getElementById('duration').value = durationMinutes;
            } else {
                document.getElementById('duration').value = '';
            }
        }
    }

    async function checkAvailability() {
        const teacherId = document.getElementById('teacherId').value;
        const studentId = document.getElementById('studentId').value;
        const scheduleDate = document.getElementById('scheduleDate').value;
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;
        const excludeId = document.getElementById('classScheduleId').value;

        const alertDiv = document.getElementById('availabilityAlert');
        const messageSpan = document.getElementById('availabilityMessage');
        const saveButton = document.getElementById('saveButton');

        if (teacherId && studentId && scheduleDate && startTime && endTime) {
            try {
                const params = new URLSearchParams({
                    teacherId: teacherId,
                    studentId: studentId,
                    date: scheduleDate,
                    startTime: startTime,
                    endTime: endTime
                });

                if (excludeId && excludeId !== '0') {
                    params.append('excludeScheduleId', excludeId);
                }

                const response = await fetch('@Url.Action("CheckAvailability", "Schedule")?' + params);
                const result = await response.json();

                if (result.hasConflict) {
                    alertDiv.style.display = 'block';
                    messageSpan.textContent = result.message;
                    saveButton.disabled = true;
                } else {
                    alertDiv.style.display = 'none';
                    saveButton.disabled = false;
                }
            } catch (error) {
                console.error('Error checking availability:', error);
            }
        } else {
            alertDiv.style.display = 'none';
            saveButton.disabled = false;
        }
    }

    function toggleRecurrence() {
        const isRecurring = document.getElementById('isRecurring').checked;
        const recurrenceDiv = document.getElementById('recurrencePatternDiv');

        if (isRecurring) {
            recurrenceDiv.style.display = 'block';
        } else {
            recurrenceDiv.style.display = 'none';
            document.getElementById('recurrencePattern').value = '';
        }
    }

    document.getElementById('scheduleForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        // Add the checkbox value explicitly since FormData doesn't handle unchecked checkboxes
        formData.set('isRecurring', document.getElementById('isRecurring').checked);

        const url = isEditMode ? '@Url.Action("Update", "Schedule")' : '@Url.Action("Create", "Schedule")';

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('scheduleModal')).hide();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving schedule:', error);
            showAlert('Error saving schedule', 'error');
        }
    });

    async function deleteSchedule(scheduleId, scheduleName) {
        if (confirm(`Are you sure you want to delete/cancel schedule "${scheduleName}"?`)) {
            try {
                const response = await fetch('@Url.Action("Delete", "Schedule")?id=' + scheduleId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting schedule:', error);
                showAlert('Error deleting schedule', 'error');
            }
        }
    }

    async function markCompleted(scheduleId) {
        if (confirm('Are you sure you want to mark this schedule as completed?')) {
            try {
                // This would be a separate endpoint to mark as completed
                // For now, we'll use the update functionality
                showAlert('Mark as completed functionality to be implemented', 'info');
            } catch (error) {
                console.error('Error marking schedule as completed:', error);
                showAlert('Error marking schedule as completed', 'error');
            }
        }
    }

    // Filter and search functionality
    function filterSchedules() {
        const statusFilter = document.getElementById('filterStatus').value.toLowerCase();
        const typeFilter = document.getElementById('filterType').value.toLowerCase();
        const dateFilter = document.getElementById('filterDate').value;
        const searchTerm = document.getElementById('searchSchedules').value.toLowerCase();
        const rows = document.querySelectorAll('#schedulesTable tbody tr');
        let visibleCount = 0;

        rows.forEach(row => {
            const status = row.getAttribute('data-status').toLowerCase();
            const type = row.getAttribute('data-type').toLowerCase();
            const date = row.getAttribute('data-date');
            const text = row.textContent.toLowerCase();

            const statusMatch = !statusFilter || status === statusFilter;
            const typeMatch = !typeFilter || type === typeFilter;
            const dateMatch = !dateFilter || date === dateFilter;
            const textMatch = !searchTerm || text.includes(searchTerm);

            if (statusMatch && typeMatch && dateMatch && textMatch) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });

        document.getElementById('scheduleCount').textContent = `${visibleCount} schedules`;
    }

    function clearFilters() {
        document.getElementById('filterStatus').value = '';
        document.getElementById('filterType').value = '';
        document.getElementById('filterDate').value = '';
        document.getElementById('searchSchedules').value = '';
        filterSchedules();
    }

    // Event listeners
    document.getElementById('filterStatus').addEventListener('change', filterSchedules);
    document.getElementById('filterType').addEventListener('change', filterSchedules);
    document.getElementById('filterDate').addEventListener('change', filterSchedules);
    document.getElementById('searchSchedules').addEventListener('input', filterSchedules);

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'info' ? 'info' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    // Initialize filters on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Set initial schedule count
        const totalSchedules = document.querySelectorAll('#schedulesTable tbody tr').length;
        document.getElementById('scheduleCount').textContent = `${totalSchedules} schedules`;
    });
</script>