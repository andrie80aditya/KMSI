@model IEnumerable<KMSI.Models.Registration>
@{
    ViewData["Title"] = "Registration Management";
    ViewData["Breadcrumb"] = "Registration Management";
}

<div class="registration-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Registration Management</h1>
            <p class="text-muted">Manage student registrations and trial classes</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openRegistrationModal()">
            <i class="fas fa-plus me-2"></i>Add New Registration
        </button>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body py-3">
            <div class="row g-3 align-items-end">
                <div class="col-md-3">
                    <label for="filterStatus" class="form-label mb-1">Filter by Status</label>
                    <select class="form-select form-select-sm" id="filterStatus">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Trial">Trial Scheduled</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="filterPaymentStatus" class="form-label mb-1">Filter by Payment</label>
                    <select class="form-select form-select-sm" id="filterPaymentStatus">
                        <option value="">All Payment Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Partial">Partial</option>
                        <option value="Paid">Paid</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="searchRegistrations" class="form-label mb-1">Search Registrations</label>
                    <input type="text" class="form-control form-control-sm" id="searchRegistrations" placeholder="Search by code, student name, or parent...">
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm w-100" onclick="clearFilters()">
                        <i class="fas fa-times me-1"></i>Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Registrations Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Registrations List</h5>
                </div>
                <div class="col-auto">
                    <span class="text-muted" id="registrationCount">@Model.Count() registrations</span>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="registrationsTable">
                    <thead class="table-light">
                        <tr>
                            <th>Registration</th>
                            <th>Student</th>
                            <th>Site</th>
                            <th>Grade</th>
                            <th>Teacher</th>
                            <th>Trial</th>
                            <th>Payment</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var registration in Model)
                        {
                            <tr data-status="@registration.Status" data-payment="@registration.PaymentStatus">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="registration-icon me-3">
                                            <i class="fas fa-user-plus"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@registration.RegistrationCode</div>
                                            <small class="text-muted">@registration.RegistrationDate.ToString("dd/MM/yyyy")</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-semibold">@registration.Student?.FirstName @registration.Student?.LastName</div>
                                        @if (!string.IsNullOrEmpty(registration.Student?.ParentName))
                                        {
                                            <small class="text-muted">Parent: @registration.Student.ParentName</small>
                                        }
                                        @if (!string.IsNullOrEmpty(registration.Student?.ParentPhone))
                                        {
                                            <div><small class="text-muted">@registration.Student.ParentPhone</small></div>
                                        }
                                    </div>
                                </td>
                                <td>@registration.Site?.SiteName</td>
                                <td>
                                    <span class="badge bg-info">@registration.RequestedGrade?.GradeName</span>
                                </td>
                                <td>
                                    @if (registration.AssignedTeacher?.User != null)
                                    {
                                        <div>
                                            <div class="fw-medium">@registration.AssignedTeacher.User.FirstName @registration.AssignedTeacher.User.LastName</div>
                                            <small class="text-muted">@registration.AssignedTeacher.TeacherCode</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not assigned</span>
                                    }
                                </td>
                                <td>
                                    @if (registration.TrialDate.HasValue)
                                    {
                                        <div>
                                            <div class="fw-medium">@registration.TrialDate.Value.ToString("dd/MM/yyyy")</div>
                                            @if (registration.TrialTime.HasValue)
                                            {
                                                <small class="text-muted">@registration.TrialTime.Value.ToString(@"hh\:mm")</small>
                                            }
                                        </div>
                                        @if (!string.IsNullOrEmpty(registration.TrialResult))
                                        {
                                            <div class="mt-1">
                                                @switch (registration.TrialResult)
                                                {
                                                    case "Pass":
                                                        <span class="badge bg-success">Passed</span>
                                                        break;
                                                    case "Fail":
                                                        <span class="badge bg-danger">Failed</span>
                                                        break;
                                                    case "Pending":
                                                        <span class="badge bg-warning">Pending</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@registration.TrialResult</span>
                                                        break;
                                                }
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not scheduled</span>
                                    }
                                </td>
                                <td>
                                    <div>
                                        @switch (registration.PaymentStatus)
                                        {
                                            case "Paid":
                                                <span class="badge bg-success">Paid</span>
                                                break;
                                            case "Partial":
                                                <span class="badge bg-warning">Partial</span>
                                                break;
                                            case "Pending":
                                                <span class="badge bg-secondary">Pending</span>
                                                break;
                                            default:
                                                <span class="badge bg-light text-dark">@registration.PaymentStatus</span>
                                                break;
                                        }
                                    </div>
                                    @if (registration.PaymentAmount.HasValue)
                                    {
                                        <small class="text-muted">IDR @registration.PaymentAmount.Value.ToString("N0")</small>
                                    }
                                </td>
                                <td>
                                    @switch (registration.Status)
                                    {
                                        case "Confirmed":
                                            <span class="badge bg-success">Confirmed</span>
                                            break;
                                        case "Trial":
                                            <span class="badge bg-info">Trial</span>
                                            break;
                                        case "Pending":
                                            <span class="badge bg-warning">Pending</span>
                                            break;
                                        case "Cancelled":
                                            <span class="badge bg-danger">Cancelled</span>
                                            break;
                                        default:
                                            <span class="badge bg-light text-dark">@registration.Status</span>
                                            break;
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        @if (registration.Status == "Pending" || registration.Status == "Trial")
                                        {
                                            <button type="button" class="btn btn-outline-success" onclick="confirmRegistration(@registration.RegistrationId)" title="Confirm Registration">
                                                <i class="fas fa-check"></i>
                                            </button>
                                        }
                                        <button type="button" class="btn btn-outline-primary" onclick="editRegistration(@registration.RegistrationId)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteRegistration(@registration.RegistrationId, '@registration.RegistrationCode')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Registration Modal -->
<div class="modal fade" id="registrationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New Registration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="registrationForm">
                <div class="modal-body">
                    <input type="hidden" id="registrationId" name="registrationId" value="0">

                    <div class="row g-3">
                        <!-- Registration Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user-plus me-2"></i>Registration Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required onchange="loadSites(); loadStudents(); loadGrades();">
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="siteId" class="form-label">Site <span class="text-danger">*</span></label>
                            <select class="form-select" id="siteId" name="siteId" required onchange="loadTeachers(); generateRegistrationCode();">
                                <option value="">Select Site</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="registrationCode" class="form-label">Registration Code <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <input type="text" class="form-control text-uppercase" id="registrationCode" name="registrationCode" maxlength="30" required readonly>
                                <button class="btn btn-outline-secondary" type="button" onclick="generateRegistrationCode()" title="Generate Code">
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label for="studentId" class="form-label">Student <span class="text-danger">*</span></label>
                            <select class="form-select" id="studentId" name="studentId" required onchange="loadStudentInfo();">
                                <option value="">Select Student</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="registrationDate" class="form-label">Registration Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="registrationDate" name="registrationDate" required>
                        </div>

                        <!-- Student Information (Read-only display) -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user me-2"></i>Student Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="studentName" class="form-label">Student Name</label>
                            <input type="text" class="form-control" id="studentName" name="studentName" readonly>
                        </div>

                        <div class="col-md-6">
                            <label for="studentContact" class="form-label">Student Contact</label>
                            <input type="text" class="form-control" id="studentContact" name="studentContact" readonly>
                        </div>

                        <div class="col-md-6">
                            <label for="parentName" class="form-label">Parent Name</label>
                            <input type="text" class="form-control" id="parentName" name="parentName" readonly>
                        </div>

                        <div class="col-md-6">
                            <label for="parentContact" class="form-label">Parent Contact</label>
                            <input type="text" class="form-control" id="parentContact" name="parentContact" readonly>
                        </div>

                        <!-- Academic Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-graduation-cap me-2"></i>Academic Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="requestedGradeId" class="form-label">Requested Grade <span class="text-danger">*</span></label>
                            <select class="form-select" id="requestedGradeId" name="requestedGradeId" required>
                                <option value="">Select Grade</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="assignedTeacherId" class="form-label">Assigned Teacher</label>
                            <select class="form-select" id="assignedTeacherId" name="assignedTeacherId">
                                <option value="">Select Teacher (Optional)</option>
                            </select>
                        </div>

                        <!-- Trial Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-calendar-check me-2"></i>Trial Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="trialDate" class="form-label">Trial Date</label>
                            <input type="date" class="form-control" id="trialDate" name="trialDate">
                        </div>

                        <div class="col-md-4">
                            <label for="trialTime" class="form-label">Trial Time</label>
                            <input type="time" class="form-control" id="trialTime" name="trialTime">
                        </div>

                        <div class="col-md-4">
                            <label for="trialResult" class="form-label">Trial Result</label>
                            <select class="form-select" id="trialResult" name="trialResult">
                                <option value="">Select Result</option>
                                <option value="Pending">Pending</option>
                                <option value="Pass">Pass</option>
                                <option value="Fail">Fail</option>
                            </select>
                        </div>

                        <!-- Payment Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-credit-card me-2"></i>Payment Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="paymentStatus" class="form-label">Payment Status</label>
                            <select class="form-select" id="paymentStatus" name="paymentStatus">
                                <option value="Pending">Pending</option>
                                <option value="Partial">Partial</option>
                                <option value="Paid">Paid</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="paymentAmount" class="form-label">Payment Amount (IDR)</label>
                            <input type="number" class="form-control" id="paymentAmount" name="paymentAmount" min="0" step="1000">
                        </div>

                        <div class="col-md-4">
                            <label for="status" class="form-label">Registration Status</label>
                            <select class="form-select" id="status" name="status">
                                <option value="Pending">Pending</option>
                                <option value="Trial">Trial Scheduled</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </div>

                        <div class="col-12">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3" maxlength="1000"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Registration
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .registration-icon {
        width: 40px;
        height: 40px;
        background: var(--warning-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 16px;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-sm > .btn {
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    .text-uppercase {
        text-transform: uppercase;
    }

    @@media (max-width: 768px) {
        .table-responsive
    {
        font-size: 0.875rem;
    }

    .registration-icon {
        width: 32px;
        height: 32px;
        font-size: 14px;
    }

    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    }
</style>

<script>
    let isEditMode = false;

    function openRegistrationModal(registrationId = null) {
        isEditMode = !!registrationId;
        const modal = new bootstrap.Modal(document.getElementById('registrationModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit Registration';
            loadRegistrationData(registrationId);
        } else {
            document.getElementById('modalTitle').textContent = 'Add New Registration';
            document.getElementById('registrationForm').reset();
            document.getElementById('registrationId').value = '0';
            document.getElementById('registrationDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('status').value = 'Pending';
            document.getElementById('paymentStatus').value = 'Pending';
        }

        modal.show();
    }

    function editRegistration(registrationId) {
        openRegistrationModal(registrationId);
    }

    async function loadRegistrationData(registrationId) {
        try {
            const response = await fetch('@Url.Action("GetRegistration", "Registration")?id=' + registrationId);
            const registration = await response.json();

            document.getElementById('registrationId').value = registration.registrationId;
            document.getElementById('companyId').value = registration.companyId;
            document.getElementById('registrationCode').value = registration.registrationCode;
            document.getElementById('registrationDate').value = registration.registrationDate;
            document.getElementById('trialDate').value = registration.trialDate || '';
            document.getElementById('trialTime').value = registration.trialTime || '';
            document.getElementById('requestedGradeId').value = registration.requestedGradeId;
            document.getElementById('status').value = registration.status;
            document.getElementById('trialResult').value = registration.trialResult || '';
            document.getElementById('paymentStatus').value = registration.paymentStatus;
            document.getElementById('paymentAmount').value = registration.paymentAmount || '';
            document.getElementById('notes').value = registration.notes || '';

            // Load dependent dropdowns
            await loadSites();
            document.getElementById('siteId').value = registration.siteId;

            await loadStudents();
            document.getElementById('studentId').value = registration.studentId;
            loadStudentInfo();

            await loadGrades();
            document.getElementById('requestedGradeId').value = registration.requestedGradeId;

            await loadTeachers();
            document.getElementById('assignedTeacherId').value = registration.assignedTeacherId || '';
        } catch (error) {
            console.error('Error loading registration:', error);
            showAlert('Error loading registration data', 'error');
        }
    }

    async function loadSites() {
        const companyId = document.getElementById('companyId').value;
        const siteSelect = document.getElementById('siteId');

        siteSelect.innerHTML = '<option value="">Select Site</option>';

        if (companyId) {
            try {
                const response = await fetch('@Url.Action("GetSitesByCompany", "Registration")?companyId=' + companyId);
                const sites = await response.json();

                sites.forEach(site => {
                    const option = document.createElement('option');
                    option.value = site.value;
                    option.textContent = site.text;
                    siteSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading sites:', error);
            }
        }
    }

    async function loadStudents() {
        const companyId = document.getElementById('companyId').value;
        const studentSelect = document.getElementById('studentId');

        studentSelect.innerHTML = '<option value="">Select Student</option>';

        if (companyId) {
            try {
                const response = await fetch('@Url.Action("GetStudentsByCompany", "Registration")?companyId=' + companyId);
                const students = await response.json();

                students.forEach(student => {
                    const option = document.createElement('option');
                    option.value = student.value;
                    option.textContent = student.text;
                    option.setAttribute('data-phone', student.phone || '');
                    option.setAttribute('data-email', student.email || '');
                    option.setAttribute('data-parent-name', student.parentName || '');
                    option.setAttribute('data-parent-phone', student.parentPhone || '');
                    option.setAttribute('data-parent-email', student.parentEmail || '');
                    studentSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading students:', error);
            }
        }
    }

    async function loadGrades() {
        const companyId = document.getElementById('companyId').value;
        const gradeSelect = document.getElementById('requestedGradeId');

        gradeSelect.innerHTML = '<option value="">Select Grade</option>';

        if (companyId) {
            try {
                const response = await fetch('@Url.Action("GetGradesByCompany", "Registration")?companyId=' + companyId);
                const grades = await response.json();

                grades.forEach(grade => {
                    const option = document.createElement('option');
                    option.value = grade.value;
                    option.textContent = grade.text;
                    gradeSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading grades:', error);
            }
        }
    }

    async function loadTeachers() {
        const siteId = document.getElementById('siteId').value;
        const teacherSelect = document.getElementById('assignedTeacherId');

        teacherSelect.innerHTML = '<option value="">Select Teacher (Optional)</option>';

        if (siteId) {
            try {
                const response = await fetch('@Url.Action("GetTeachersBySite", "Registration")?siteId=' + siteId);
                const teachers = await response.json();

                teachers.forEach(teacher => {
                    const option = document.createElement('option');
                    option.value = teacher.value;
                    option.textContent = teacher.text;
                    teacherSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }
    }

    function loadStudentInfo() {
        const studentSelect = document.getElementById('studentId');
        const selectedOption = studentSelect.options[studentSelect.selectedIndex];

        if (selectedOption.value) {
            const studentName = selectedOption.textContent;
            const phone = selectedOption.getAttribute('data-phone');
            const email = selectedOption.getAttribute('data-email');
            const parentName = selectedOption.getAttribute('data-parent-name');
            const parentPhone = selectedOption.getAttribute('data-parent-phone');
            const parentEmail = selectedOption.getAttribute('data-parent-email');

            document.getElementById('studentName').value = studentName;
            document.getElementById('studentContact').value = phone ? `${phone}${email ? ' / ' + email : ''}` : email || '';
            document.getElementById('parentName').value = parentName;
            document.getElementById('parentContact').value = parentPhone ? `${parentPhone}${parentEmail ? ' / ' + parentEmail : ''}` : parentEmail || '';
        } else {
            document.getElementById('studentName').value = '';
            document.getElementById('studentContact').value = '';
            document.getElementById('parentName').value = '';
            document.getElementById('parentContact').value = '';
        }
    }

    async function generateRegistrationCode() {
        const companyId = document.getElementById('companyId').value;
        const siteId = document.getElementById('siteId').value;

        if (!companyId || !siteId) {
            showAlert('Please select Company and Site first', 'error');
            return;
        }

        try {
            const response = await fetch('@Url.Action("GenerateRegistrationCode", "Registration")?companyId=' + companyId + '&siteId=' + siteId);
            const result = await response.json();

            if (result.success) {
                document.getElementById('registrationCode').value = result.registrationCode;
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error generating registration code:', error);
            showAlert('Error generating registration code', 'error');
        }
    }

    document.getElementById('registrationForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        const url = isEditMode ? '@Url.Action("Update", "Registration")' : '@Url.Action("Create", "Registration")';

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('registrationModal')).hide();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving registration:', error);
            showAlert('Error saving registration', 'error');
        }
    });

    async function deleteRegistration(registrationId, registrationCode) {
        if (confirm(`Are you sure you want to delete registration "${registrationCode}"?`)) {
            try {
                const response = await fetch('@Url.Action("Delete", "Registration")?id=' + registrationId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting registration:', error);
                showAlert('Error deleting registration', 'error');
            }
        }
    }

    async function confirmRegistration(registrationId) {
        if (confirm('Are you sure you want to confirm this registration?')) {
            try {
                const response = await fetch('@Url.Action("ConfirmRegistration", "Registration")?id=' + registrationId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error confirming registration:', error);
                showAlert('Error confirming registration', 'error');
            }
        }
    }

    // Filter and search functionality
    function filterRegistrations() {
        const statusFilter = document.getElementById('filterStatus').value.toLowerCase();
        const paymentFilter = document.getElementById('filterPaymentStatus').value.toLowerCase();
        const searchTerm = document.getElementById('searchRegistrations').value.toLowerCase();
        const rows = document.querySelectorAll('#registrationsTable tbody tr');
        let visibleCount = 0;

        rows.forEach(row => {
            const status = row.getAttribute('data-status').toLowerCase();
            const payment = row.getAttribute('data-payment').toLowerCase();
            const text = row.textContent.toLowerCase();

            const statusMatch = !statusFilter || status === statusFilter;
            const paymentMatch = !paymentFilter || payment === paymentFilter;
            const textMatch = !searchTerm || text.includes(searchTerm);

            if (statusMatch && paymentMatch && textMatch) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });

        document.getElementById('registrationCount').textContent = `${visibleCount} registrations`;
    }

    function clearFilters() {
        document.getElementById('filterStatus').value = '';
        document.getElementById('filterPaymentStatus').value = '';
        document.getElementById('searchRegistrations').value = '';
        filterRegistrations();
    }

    // Event listeners
    document.getElementById('filterStatus').addEventListener('change', filterRegistrations);
    document.getElementById('filterPaymentStatus').addEventListener('change', filterRegistrations);
    document.getElementById('searchRegistrations').addEventListener('input', filterRegistrations);

    // Registration code uppercase transformation
    document.getElementById('registrationCode').addEventListener('input', function(e) {
        e.target.value = e.target.value.toUpperCase();
    });

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    // Initialize filters on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Set initial registration count
        const totalRegistrations = document.querySelectorAll('#registrationsTable tbody tr').length;
        document.getElementById('registrationCount').textContent = `${totalRegistrations} registrations`;
    });
</script>