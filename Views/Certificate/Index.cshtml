@model IEnumerable<KMSI.Models.Certificate>
@{
    ViewData["Title"] = "Certificate Management";
    ViewData["Breadcrumb"] = "Certificate Management";
}

<div class="certificate-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Certificate Management</h1>
            <p class="text-muted">Generate and manage student certificates</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openGenerateModal()">
            <i class="fas fa-plus me-2"></i>Generate Certificate
        </button>
    </div>

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count()</h5>
                            <small>Total Certificates</small>
                        </div>
                        <i class="fas fa-certificate fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count(c => c.Status == "Issued")</h5>
                            <small>Issued</small>
                        </div>
                        <i class="fas fa-check-circle fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Sum(c => c.PrintCount)</h5>
                            <small>Total Prints</small>
                        </div>
                        <i class="fas fa-print fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title mb-0">@Model.Count(c => c.Status == "Revoked")</h5>
                            <small>Revoked</small>
                        </div>
                        <i class="fas fa-times-circle fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Certificates Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Certificates List</h5>
                </div>
                <div class="col-auto">
                    <div class="d-flex gap-2 align-items-center">
                        <select id="statusFilter" class="form-select form-select-sm" onchange="filterCertificates()">
                            <option value="">All Status</option>
                            <option value="Issued">Issued</option>
                            <option value="Printed">Printed</option>
                            <option value="Revoked">Revoked</option>
                        </select>
                        <div class="input-group input-group-sm" style="width: 250px;">
                            <input type="text" class="form-control" id="searchCertificates" placeholder="Search certificates...">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="certificatesTable">
                    <thead class="table-light">
                        <tr>
                            <th>Certificate No.</th>
                            <th>Student</th>
                            <th>Grade</th>
                            <th>Title</th>
                            <th>Issue Date</th>
                            <th>Status</th>
                            <th>Prints</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var certificate in Model)
                        {
                            <tr>
                                <td>
                                    <div class="fw-semibold text-primary">@certificate.CertificateNumber</div>
                                    <small class="text-muted">@certificate.StudentExamination?.Examination?.Site?.SiteName</small>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="student-avatar me-2">
                                            @certificate.Student?.FirstName?.Substring(0, 1)@certificate.Student?.LastName?.Substring(0, 1)
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@certificate.Student?.FirstName @certificate.Student?.LastName</div>
                                            <small class="text-muted">@certificate.Student?.StudentCode</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-primary">@certificate.Grade?.GradeName</span>
                                </td>
                                <td>
                                    <div>@certificate.CertificateTitle</div>
                                    @if (certificate.StudentExamination?.Score.HasValue == true)
                                    {
                                        <small class="text-success">
                                            <i class="fas fa-star me-1"></i>
                                            Score: @certificate.StudentExamination.Score/@certificate.StudentExamination.MaxScore
                                        </small>
                                    }
                                </td>
                                <td>
                                    <div>@certificate.IssueDate.ToString("dd/MM/yyyy")</div>
                                    <small class="text-muted">@certificate.IssuedBy</small>
                                </td>
                                <td>
                                    @switch (certificate.Status)
                                    {
                                        case "Issued":
                                            <span class="badge bg-success">Issued</span>
                                            break;
                                        case "Printed":
                                            <span class="badge bg-info">Printed</span>
                                            break;
                                        case "Revoked":
                                            <span class="badge bg-danger">Revoked</span>
                                            break;
                                        default:
                                            <span class="badge bg-secondary">@certificate.Status</span>
                                            break;
                                    }
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <span class="me-2">@certificate.PrintCount</span>
                                        @if (certificate.PrintCount > 0)
                                        {
                                            <i class="fas fa-print text-info" title="Last printed: @certificate.LastPrintDate?.ToString("dd/MM/yyyy HH:mm")"></i>
                                        }
                                    </div>
                                </td>
                                <td class="text-end">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-cog"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <a class="dropdown-item" href="#" onclick="viewCertificate(@certificate.CertificateId)">
                                                    <i class="fas fa-eye me-2"></i>View Details
                                                </a>
                                            </li>
                                            @if (certificate.Status != "Revoked")
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="printCertificate(@certificate.CertificateId)">
                                                        <i class="fas fa-print me-2"></i>Print Certificate
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="editCertificate(@certificate.CertificateId)">
                                                        <i class="fas fa-edit me-2"></i>Edit
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item text-warning" href="#" onclick="changeStatus(@certificate.CertificateId, 'Revoked')">
                                                        <i class="fas fa-ban me-2"></i>Revoke
                                                    </a>
                                                </li>
                                            }
                                            @if (certificate.PrintCount <= 5)
                                            {
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item text-danger" href="#" onclick="deleteCertificate(@certificate.CertificateId, '@certificate.CertificateNumber')">
                                                        <i class="fas fa-trash me-2"></i>Delete
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Generate Certificate Modal -->
<div class="modal fade" id="generateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Generate Certificate</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="generateForm">
                <div class="modal-body">
                    <div class="row g-3">
                        <!-- Student Selection -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user-graduate me-2"></i>Student Selection
                            </h6>
                        </div>

                        <div class="col-12">
                            <label for="studentExaminationId" class="form-label">Eligible Student <span class="text-danger">*</span></label>
                            <select class="form-select" id="studentExaminationId" name="studentExaminationId" required onchange="loadStudentDetails()">
                                <option value="">Select eligible student...</option>
                            </select>
                            <small class="text-muted">Only students who have passed examinations are shown</small>
                        </div>

                        <div class="col-12" id="studentDetails" style="display: none;">
                            <div class="alert alert-info">
                                <div id="studentDetailsContent"></div>
                            </div>
                        </div>

                        <!-- Certificate Details -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-certificate me-2"></i>Certificate Details
                            </h6>
                        </div>

                        <div class="col-12">
                            <label for="certificateTitle" class="form-label">Certificate Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="certificateTitle" name="certificateTitle" required
                                   placeholder="e.g., Certificate of Achievement - Piano Grade 1">
                        </div>

                        <div class="col-md-6">
                            <label for="issuedBy" class="form-label">Issued By <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="issuedBy" name="issuedBy" required
                                   placeholder="e.g., Kawai Music School Indonesia">
                        </div>

                        <div class="col-md-6">
                            <label for="signedBy" class="form-label">Signed By</label>
                            <input type="text" class="form-control" id="signedBy" name="signedBy"
                                   placeholder="e.g., Principal Name">
                        </div>

                        <!-- Certificate Number -->
                        <div class="col-md-6" id="customNumberField" style="display: none;">
                            <label for="customCertificateNumber" class="form-label">Custom Certificate Number <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="customCertificateNumber" name="customCertificateNumber"
                                   placeholder="e.g., CERT-001">
                        </div>

                        <div class="col-12">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3"
                                      placeholder="Additional notes about this certificate..."></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-certificate me-2"></i>Generate Certificate
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Certificate Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Certificate</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editForm">
                <div class="modal-body">
                    <input type="hidden" id="editCertificateId" name="certificateId">

                    <div class="row g-3">
                        <div class="col-12">
                            <label for="editCertificateNumber" class="form-label">Certificate Number <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="editCertificateNumber" name="certificateNumber" required>
                        </div>

                        <div class="col-12">
                            <label for="editCertificateTitle" class="form-label">Certificate Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="editCertificateTitle" name="certificateTitle" required>
                        </div>

                        <div class="col-md-6">
                            <label for="editIssueDate" class="form-label">Issue Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="editIssueDate" name="issueDate" required>
                        </div>

                        <div class="col-md-6">
                            <label for="editStatus" class="form-label">Status <span class="text-danger">*</span></label>
                            <select class="form-select" id="editStatus" name="status" required>
                                <option value="Issued">Issued</option>
                                <option value="Printed">Printed</option>
                                <option value="Revoked">Revoked</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="editIssuedBy" class="form-label">Issued By <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="editIssuedBy" name="issuedBy" required>
                        </div>

                        <div class="col-md-6">
                            <label for="editSignedBy" class="form-label">Signed By</label>
                            <input type="text" class="form-control" id="editSignedBy" name="signedBy">
                        </div>

                        <div class="col-12">
                            <label for="editNotes" class="form-label">Notes</label>
                            <textarea class="form-control" id="editNotes" name="notes" rows="3"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Update Certificate
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Certificate Modal -->
<div class="modal fade" id="viewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Certificate Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="viewContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="printFromView()">
                    <i class="fas fa-print me-2"></i>Print Certificate
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .student-avatar {
        width: 32px;
        height: 32px;
        background: var(--primary-color);
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 11px;
    }

    .table td {
        vertical-align: middle;
        padding: 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    .card {
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
    }

    .dropdown-menu {
        min-width: 160px;
    }

    .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

        .dropdown-item i {
            width: 16px;
        }

    @@media (max-width: 768px) {
        .table-responsive
    {
        font-size: 0.875rem;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    .student-avatar {
        width: 28px;
        height: 28px;
        font-size: 10px;
    }

    }
</style>

<script>
    let currentCertificateId = null;

    function openGenerateModal() {
        // Reset form
        const form = document.getElementById('generateForm');
        if (form) form.reset();

        // Set checkbox state
        const autoGenerateCheckbox = document.getElementById('autoGenerateNumber');
        if (autoGenerateCheckbox) {
            autoGenerateCheckbox.checked = true;
        }

        // Call toggle function after setting checkbox
        setTimeout(() => {
            toggleCertificateNumber();
        }, 100);

        loadEligibleStudents();

        const modal = new bootstrap.Modal(document.getElementById('generateModal'));
        modal.show();
    }

    async function loadEligibleStudents() {
        try {
            const response = await fetch('@Url.Action("GetEligibleStudents", "Certificate")');
            const students = await response.json();

            const select = document.getElementById('studentExaminationId');
            select.innerHTML = '<option value="">Select eligible student...</option>';

            students.forEach(student => {
                const option = document.createElement('option');
                option.value = student.studentExaminationId;
                option.textContent = `${student.studentName} (${student.studentCode}) - ${student.gradeName} - Score: ${student.score}/${student.maxScore}`;
                option.setAttribute('data-student', JSON.stringify(student));
                select.appendChild(option);
            });

            if (students.length === 0) {
                select.innerHTML = '<option value="">No eligible students found</option>';
            }
        } catch (error) {
            console.error('Error loading eligible students:', error);
            showAlert('Error loading eligible students', 'error');
        }
    }

    function loadStudentDetails() {
        const select = document.getElementById('studentExaminationId');
        const selectedOption = select.options[select.selectedIndex];

        if (selectedOption && selectedOption.value) {
            const student = JSON.parse(selectedOption.getAttribute('data-student'));

            document.getElementById('studentDetailsContent').innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Student:</strong> ${student.studentName} (${student.studentCode})<br>
                        <strong>Grade:</strong> ${student.gradeName}<br>
                    </div>
                    <div class="col-md-6">
                        <strong>Exam:</strong> ${student.examName}<br>
                        <strong>Date:</strong> ${student.examDate}<br>
                        <strong>Score:</strong> ${student.score}/${student.maxScore} (${student.result})
                    </div>
                </div>
            `;

            document.getElementById('studentDetails').style.display = 'block';

            // Auto-populate certificate title
            document.getElementById('certificateTitle').value = `Certificate of Achievement - ${student.gradeName}`;
            document.getElementById('issuedBy').value = 'Kawai Music School Indonesia';
        } else {
            document.getElementById('studentDetails').style.display = 'none';
        }
    }

    function toggleCertificateNumber() {
        const autoGenerateCheckbox = document.getElementById('autoGenerateNumber');
        const customField = document.getElementById('customNumberField');
        const customInput = document.getElementById('customCertificateNumber');

        if (!autoGenerateCheckbox || !customField || !customInput) {
            console.error('Required elements not found');
            return;
        }

        const autoGenerate = autoGenerateCheckbox.checked;

        if (autoGenerate) {
            customField.style.display = 'none';
            customInput.required = false;
            customInput.value = ''; // Clear custom value
        } else {
            customField.style.display = 'block';
            customInput.required = true;
        }
    }

    document.getElementById('generateForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        try {
            const response = await fetch('@Url.Action("GenerateCertificate", "Certificate")', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(`Certificate generated successfully. Number: ${result.certificateNumber}`, 'success');
                bootstrap.Modal.getInstance(document.getElementById('generateModal')).hide();
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error generating certificate:', error);
            showAlert('Error generating certificate', 'error');
        }
    });

    async function editCertificate(certificateId) {
        try {
            const response = await fetch(`@Url.Action("GetCertificate", "Certificate")?id=${certificateId}`);
            const certificate = await response.json();

            document.getElementById('editCertificateId').value = certificate.certificateId;
            document.getElementById('editCertificateNumber').value = certificate.certificateNumber;
            document.getElementById('editCertificateTitle').value = certificate.certificateTitle;
            document.getElementById('editIssueDate').value = certificate.issueDate;
            document.getElementById('editIssuedBy').value = certificate.issuedBy;
            document.getElementById('editSignedBy').value = certificate.signedBy || '';
            document.getElementById('editStatus').value = certificate.status;
            document.getElementById('editNotes').value = certificate.notes || '';

            const modal = new bootstrap.Modal(document.getElementById('editModal'));
            modal.show();
        } catch (error) {
            console.error('Error loading certificate:', error);
            showAlert('Error loading certificate data', 'error');
        }
    }

    document.getElementById('editForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        try {
            const response = await fetch('@Url.Action("Update", "Certificate")', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error updating certificate:', error);
            showAlert('Error updating certificate', 'error');
        }
    });

    async function viewCertificate(certificateId) {
        try {
            const response = await fetch(`@Url.Action("GetCertificate", "Certificate")?id=${certificateId}`);
            const certificate = await response.json();

            currentCertificateId = certificateId;

            document.getElementById('viewContent').innerHTML = `
                <div class="certificate-preview">
                    <div class="text-center mb-4">
                        <h4 class="text-primary">${certificate.certificateTitle}</h4>
                        <p class="text-muted">Certificate No: ${certificate.certificateNumber}</p>
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <strong>Student:</strong><br>
                            ${certificate.studentName} (${certificate.studentCode})
                        </div>
                        <div class="col-md-6">
                            <strong>Grade:</strong><br>
                            ${certificate.gradeName}
                        </div>
                        <div class="col-md-6">
                            <strong>Issue Date:</strong><br>
                            ${new Date(certificate.issueDate).toLocaleDateString()}
                        </div>
                        <div class="col-md-6">
                            <strong>Status:</strong><br>
                            <span class="badge bg-success">${certificate.status}</span>
                        </div>
                        <div class="col-md-6">
                            <strong>Issued By:</strong><br>
                            ${certificate.issuedBy}
                        </div>
                        ${certificate.signedBy ? `
                        <div class="col-md-6">
                            <strong>Signed By:</strong><br>
                            ${certificate.signedBy}
                        </div>` : ''}
                        ${certificate.examScore ? `
                        <div class="col-md-6">
                            <strong>Exam Score:</strong><br>
                            ${certificate.examScore}/100 (${certificate.examResult})
                        </div>` : ''}
                        ${certificate.notes ? `
                        <div class="col-12">
                            <strong>Notes:</strong><br>
                            ${certificate.notes}
                        </div>` : ''}
                    </div>
                </div>
            `;

            const modal = new bootstrap.Modal(document.getElementById('viewModal'));
            modal.show();
        } catch (error) {
            console.error('Error loading certificate details:', error);
            showAlert('Error loading certificate details', 'error');
        }
    }

    async function printCertificate(certificateId) {
        if (confirm('Print this certificate? This will increment the print count and send email if addresses are available.')) {
            try {
                const response = await fetch('@Url.Action("PrintCertificate", "Certificate")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${certificateId}`
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');

                    // Download PDF
                    if (result.pdfData) {
                        const byteCharacters = atob(result.pdfData);
                        const byteNumbers = new Array(byteCharacters.length);
                        for (let i = 0; i < byteCharacters.length; i++) {
                            byteNumbers[i] = byteCharacters.charCodeAt(i);
                        }
                        const byteArray = new Uint8Array(byteNumbers);
                        const blob = new Blob([byteArray], { type: 'application/pdf' });

                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = result.fileName;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    }

                    setTimeout(() => location.reload(), 2000);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error printing certificate:', error);
                showAlert('Error printing certificate', 'error');
            }
        }
    }

    function printFromView() {
        if (currentCertificateId) {
            printCertificate(currentCertificateId);
        }
    }

    async function changeStatus(certificateId, status) {
        const confirmMessage = `Change certificate status to ${status}?`;

        if (confirm(confirmMessage)) {
            try {
                const response = await fetch('@Url.Action("ChangeStatus", "Certificate")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${certificateId}&status=${status}`
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error changing status:', error);
                showAlert('Error changing status', 'error');
            }
        }
    }

    async function deleteCertificate(certificateId, certificateNumber) {
        if (confirm(`Are you sure you want to delete certificate "${certificateNumber}"?`)) {
            try {
                const response = await fetch(`@Url.Action("Delete", "Certificate")?id=${certificateId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting certificate:', error);
                showAlert('Error deleting certificate', 'error');
            }
        }
    }

    // Search and filter functionality
    document.getElementById('searchCertificates').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        filterTable(searchTerm, document.getElementById('statusFilter').value);
    });

    function filterCertificates() {
        const searchTerm = document.getElementById('searchCertificates').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value;
        filterTable(searchTerm, statusFilter);
    }

    function filterTable(searchTerm, statusFilter) {
        const rows = document.querySelectorAll('#certificatesTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            const statusCell = row.cells[5]; // Status column
            const status = statusCell.textContent.trim();

            const matchesSearch = text.includes(searchTerm);
            const matchesStatus = !statusFilter || status.toLowerCase().includes(statusFilter.toLowerCase());

            row.style.display = matchesSearch && matchesStatus ? '' : 'none';
        });
    }

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }
</script>