@model IEnumerable<KMSI.Models.Teacher>
@{
    ViewData["Title"] = "Teacher Management";
    ViewData["Breadcrumb"] = "Teacher Management";
}

<div class="teacher-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Teacher Management</h1>
            <p class="text-muted">Manage teachers and their profiles</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openTeacherModal()">
            <i class="fas fa-plus me-2"></i>Add New Teacher
        </button>
    </div>

    <!-- Teachers Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Teachers List</h5>
                </div>
                <div class="col-auto">
                    <div class="input-group input-group-sm" style="width: 250px;">
                        <input type="text" class="form-control" id="searchTeachers" placeholder="Search teachers...">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="teachersTable">
                    <thead class="table-light">
                        <tr>
                            <th>Teacher</th>
                            <th>Code</th>
                            <th>Contact</th>
                            <th>Site</th>
                            <th>Specialization</th>
                            <th>Experience</th>
                            <th>Rate</th>
                            <th>Trial</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var teacher in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="teacher-avatar me-3">
                                            @(teacher.User?.FirstName?.Substring(0, 1))@(teacher.User?.LastName?.Substring(0, 1))
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@teacher.User?.FirstName @teacher.User?.LastName</div>
                                            <small class="text-muted">@teacher.User?.Username</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-primary">@teacher.TeacherCode</span>
                                </td>
                                <td>
                                    <div>
                                        @if (!string.IsNullOrEmpty(teacher.User?.Phone))
                                        {
                                            <div><i class="fas fa-phone fa-sm me-1"></i>@teacher.User.Phone</div>
                                        }
                                        @if (!string.IsNullOrEmpty(teacher.User?.Email))
                                        {
                                            <div><i class="fas fa-envelope fa-sm me-1"></i>@teacher.User.Email</div>
                                        }
                                    </div>
                                </td>
                                <td>@teacher.Site?.SiteName</td>
                                <td>@(teacher.Specialization ?? "-")</td>
                                <td>
                                    @if (teacher.ExperienceYears.HasValue)
                                    {
                                        <span>@teacher.ExperienceYears years</span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    @if (teacher.HourlyRate.HasValue)
                                    {
                                        <span>IDR @teacher.HourlyRate.Value.ToString("N0")</span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    @if (teacher.IsAvailableForTrial)
                                    {
                                        <span class="badge bg-success">Available</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Not Available</span>
                                    }
                                </td>
                                <td>
                                    @if (teacher.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary" onclick="editTeacher(@teacher.TeacherId)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteTeacher(@teacher.TeacherId, '@teacher.User?.FirstName @teacher.User?.LastName')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Teacher Modal -->
<div class="modal fade" id="teacherModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New Teacher</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="teacherForm">
                <div class="modal-body">
                    <input type="hidden" id="teacherId" name="teacherId" value="0">
                    <input type="hidden" id="userId" name="userId" value="0">

                    <div class="row g-3">
                        <!-- Personal Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user me-2"></i>Personal Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="firstName" class="form-label">First Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="firstName" name="firstName" maxlength="50" required>
                        </div>

                        <div class="col-md-6">
                            <label for="lastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="lastName" name="lastName" maxlength="50" required>
                        </div>

                        <div class="col-md-6">
                            <label for="username" class="form-label">Username <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="username" name="username" maxlength="50" required>
                        </div>

                        <div class="col-md-6">
                            <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="email" name="email" maxlength="100" required>
                        </div>

                        <div class="col-md-6">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="text" class="form-control" id="phone" name="phone" maxlength="20">
                        </div>

                        <div class="col-md-6">
                            <label for="dateOfBirth" class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" id="dateOfBirth" name="dateOfBirth">
                        </div>

                        <div class="col-md-6">
                            <label for="gender" class="form-label">Gender</label>
                            <select class="form-select" id="gender" name="gender">
                                <option value="">Select Gender</option>
                                <option value="M">Male</option>
                                <option value="F">Female</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="city" maxlength="50">
                        </div>

                        <div class="col-12">
                            <label for="address" class="form-label">Address</label>
                            <textarea class="form-control" id="address" name="address" rows="2" maxlength="500"></textarea>
                        </div>

                        <!-- Assignment Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-building me-2"></i>Assignment Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required onchange="loadSites()">
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="siteId" class="form-label">Site <span class="text-danger">*</span></label>
                            <select class="form-select" id="siteId" name="siteId" required>
                                <option value="">Select Site</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="teacherCode" class="form-label">Teacher Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control text-uppercase" id="teacherCode" name="teacherCode" maxlength="20" required>
                        </div>

                        <!-- Professional Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-graduation-cap me-2"></i>Professional Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="specialization" class="form-label">Specialization</label>
                            <input type="text" class="form-control" id="specialization" name="specialization" maxlength="100">
                        </div>

                        <div class="col-md-6">
                            <label for="experienceYears" class="form-label">Experience (Years)</label>
                            <input type="number" class="form-control" id="experienceYears" name="experienceYears" min="0" max="50">
                        </div>

                        <div class="col-md-6">
                            <label for="hourlyRate" class="form-label">Hourly Rate (IDR)</label>
                            <input type="number" class="form-control" id="hourlyRate" name="hourlyRate" min="0" step="1000">
                        </div>

                        <div class="col-md-6">
                            <label for="maxStudentsPerDay" class="form-label">Max Students Per Day</label>
                            <input type="number" class="form-control" id="maxStudentsPerDay" name="maxStudentsPerDay" value="8" min="1" max="20" required>
                        </div>

                        <div class="col-md-6">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="isAvailableForTrial" name="isAvailableForTrial" checked>
                                <label class="form-check-label" for="isAvailableForTrial">
                                    Available for Trial Classes
                                </label>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active Teacher
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info mt-3" id="passwordInfo" style="display: none;">
                        <i class="fas fa-info-circle me-2"></i>
                        Default password will be set to: <strong>teacher123</strong>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Teacher
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .teacher-avatar {
        width: 40px;
        height: 40px;
        background: var(--warning-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 14px;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-sm > .btn {
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    .text-uppercase {
        text-transform: uppercase;
    }

    @@media (max-width: 768px) {
        .table-responsive
    {
        font-size: 0.875rem;
    }

    .teacher-avatar {
        width: 32px;
        height: 32px;
        font-size: 12px;
    }

    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    }
</style>

<script>
    let isEditMode = false;

    function openTeacherModal(teacherId = null) {
        isEditMode = !!teacherId;
        const modal = new bootstrap.Modal(document.getElementById('teacherModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit Teacher';
            document.getElementById('passwordInfo').style.display = 'none';
            loadTeacherData(teacherId);
        } else {
            document.getElementById('modalTitle').textContent = 'Add New Teacher';
            document.getElementById('passwordInfo').style.display = 'block';
            document.getElementById('teacherForm').reset();
            document.getElementById('teacherId').value = '0';
            document.getElementById('userId').value = '0';
            document.getElementById('maxStudentsPerDay').value = '8';
            document.getElementById('isAvailableForTrial').checked = true;
            document.getElementById('isActive').checked = true;
        }

        modal.show();
    }

    function editTeacher(teacherId) {
        openTeacherModal(teacherId);
    }

    async function loadTeacherData(teacherId) {
        try {
            const response = await fetch('@Url.Action("GetTeacher", "Teacher")?id=' + teacherId);
            const teacher = await response.json();

            document.getElementById('teacherId').value = teacher.teacherId;
            document.getElementById('userId').value = teacher.userId;
            document.getElementById('companyId').value = teacher.companyId;
            document.getElementById('teacherCode').value = teacher.teacherCode;
            document.getElementById('specialization').value = teacher.specialization || '';
            document.getElementById('experienceYears').value = teacher.experienceYears || '';
            document.getElementById('hourlyRate').value = teacher.hourlyRate || '';
            document.getElementById('maxStudentsPerDay').value = teacher.maxStudentsPerDay;
            document.getElementById('isAvailableForTrial').checked = teacher.isAvailableForTrial;
            document.getElementById('isActive').checked = teacher.isActive;
            document.getElementById('username').value = teacher.username || '';
            document.getElementById('email').value = teacher.email || '';
            document.getElementById('firstName').value = teacher.firstName || '';
            document.getElementById('lastName').value = teacher.lastName || '';
            document.getElementById('phone').value = teacher.phone || '';
            document.getElementById('address').value = teacher.address || '';
            document.getElementById('city').value = teacher.city || '';
            document.getElementById('dateOfBirth').value = teacher.dateOfBirth || '';
            document.getElementById('gender').value = teacher.gender || '';

            // Load sites for the selected company
            await loadSites();
            document.getElementById('siteId').value = teacher.siteId || '';
        } catch (error) {
            console.error('Error loading teacher:', error);
            showAlert('Error loading teacher data', 'error');
        }
    }

    async function loadSites() {
        const companyId = document.getElementById('companyId').value;
        const siteSelect = document.getElementById('siteId');

        siteSelect.innerHTML = '<option value="">Select Site</option>';

        if (companyId) {
            try {
                const response = await fetch('@Url.Action("GetSitesByCompany", "Teacher")?companyId=' + companyId);
                const sites = await response.json();

                sites.forEach(site => {
                    const option = document.createElement('option');
                    option.value = site.value;
                    option.textContent = site.text;
                    siteSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading sites:', error);
            }
        }
    }

    document.getElementById('teacherForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        // Add the checkbox values explicitly since FormData doesn't handle unchecked checkboxes
        formData.set('isAvailableForTrial', document.getElementById('isAvailableForTrial').checked);
        formData.set('isActive', document.getElementById('isActive').checked);

        const url = isEditMode ? '@Url.Action("Update", "Teacher")' : '@Url.Action("Create", "Teacher")';

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('teacherModal')).hide();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving teacher:', error);
            showAlert('Error saving teacher', 'error');
        }
    });

    async function deleteTeacher(teacherId, teacherName) {
        if (confirm(`Are you sure you want to delete teacher "${teacherName}"?`)) {
            try {
                const response = await fetch('@Url.Action("Delete", "Teacher")?id=' + teacherId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting teacher:', error);
                showAlert('Error deleting teacher', 'error');
            }
        }
    }

    // Search functionality
    document.getElementById('searchTeachers').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('#teachersTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });

    // Teacher code uppercase transformation
    document.getElementById('teacherCode').addEventListener('input', function(e) {
        e.target.value = e.target.value.toUpperCase();
    });

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }
</script>