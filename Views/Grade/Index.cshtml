@model IEnumerable<KMSI.Models.Grade>
@{
    ViewData["Title"] = "Grade Management";
    ViewData["Breadcrumb"] = "Grade Management";
}

<div class="grade-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Grade Management</h1>
            <p class="text-muted">Manage course grades and levels</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openGradeModal()">
            <i class="fas fa-plus me-2"></i>Add New Grade
        </button>
    </div>

    <!-- Grades Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Grades List</h5>
                </div>
                <div class="col-auto">
                    <div class="input-group input-group-sm" style="width: 250px;">
                        <input type="text" class="form-control" id="searchGrades" placeholder="Search grades...">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="gradesTable">
                    <thead class="table-light">
                        <tr>
                            <th>Order</th>
                            <th>Grade</th>
                            <th>Code</th>
                            <th>Company</th>
                            <th>Duration</th>
                            <th>Description</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var grade in Model)
                        {
                            <tr>
                                <td>
                                    <div class="sort-order-badge">
                                        @(grade.SortOrder ?? 0)
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="grade-icon me-3">
                                            <i class="fas fa-layer-group"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@grade.GradeName</div>
                                            <small class="text-muted">@grade.GradeCode</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-secondary">@grade.GradeCode</span>
                                </td>
                                <td>@grade.Company?.CompanyName</td>
                                <td>
                                    @if (grade.Duration.HasValue)
                                    {
                                        <span class="duration-badge">
                                            <i class="fas fa-clock me-1"></i>@grade.Duration months
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(grade.Description))
                                    {
                                        <span class="description-text" title="@grade.Description">
                                            @(grade.Description.Length > 50 ? grade.Description.Substring(0, 50) + "..." : grade.Description)
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (grade.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary" onclick="editGrade(@grade.GradeId)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteGrade(@grade.GradeId, '@grade.GradeName')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Grade Modal -->
<div class="modal fade" id="gradeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New Grade</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="gradeForm">
                <div class="modal-body">
                    <input type="hidden" id="gradeId" name="gradeId" value="0">

                    <div class="row g-3">
                        <!-- Basic Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-layer-group me-2"></i>Grade Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required onchange="updateSortOrder()">
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="sortOrder" class="form-label">Sort Order</label>
                            <input type="number" class="form-control" id="sortOrder" name="sortOrder" min="1" max="999">
                            <small class="text-muted">Display order (lower numbers appear first)</small>
                        </div>

                        <div class="col-md-6">
                            <label for="gradeCode" class="form-label">Grade Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control text-uppercase" id="gradeCode" name="gradeCode" maxlength="10" required>
                        </div>

                        <div class="col-md-6">
                            <label for="gradeName" class="form-label">Grade Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="gradeName" name="gradeName" maxlength="50" required>
                        </div>

                        <div class="col-12">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" maxlength="255"></textarea>
                        </div>

                        <!-- Duration and Settings -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-clock me-2"></i>Duration & Settings
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="duration" class="form-label">Duration (Months)</label>
                            <input type="number" class="form-control" id="duration" name="duration" min="1" max="120">
                            <small class="text-muted">Expected completion time in months</small>
                        </div>

                        <div class="col-md-6">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active Grade
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Grade
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .grade-icon {
        width: 40px;
        height: 40px;
        background: var(--info-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 16px;
    }

    .sort-order-badge {
        width: 32px;
        height: 32px;
        background: var(--primary-color);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 14px;
    }

    .duration-badge {
        color: var(--info-color);
        font-weight: 500;
    }

    .description-text {
        cursor: help;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-sm > .btn {
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    .text-uppercase {
        text-transform: uppercase;
    }
        
    @@media (max-width: 768px) {
        .table-responsive
    {
        font-size: 0.875rem;
    }

    .grade-icon {
        width: 32px;
        height: 32px;
        font-size: 14px;
    }

    .sort-order-badge {
        width: 28px;
        height: 28px;
        font-size: 12px;
    }

    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    }
</style>

<script>
    let isEditMode = false;

    function openGradeModal(gradeId = null) {
        isEditMode = !!gradeId;
        const modal = new bootstrap.Modal(document.getElementById('gradeModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit Grade';
            loadGradeData(gradeId);
        } else {
            document.getElementById('modalTitle').textContent = 'Add New Grade';
            document.getElementById('gradeForm').reset();
            document.getElementById('gradeId').value = '0';
            document.getElementById('isActive').checked = true;
        }

        modal.show();
    }

    function editGrade(gradeId) {
        openGradeModal(gradeId);
    }

    async function loadGradeData(gradeId) {
        try {
            const response = await fetch('@Url.Action("GetGrade", "Grade")?id=' + gradeId);
            const grade = await response.json();

            document.getElementById('gradeId').value = grade.gradeId;
            document.getElementById('companyId').value = grade.companyId;
            document.getElementById('gradeCode').value = grade.gradeCode;
            document.getElementById('gradeName').value = grade.gradeName;
            document.getElementById('description').value = grade.description || '';
            document.getElementById('duration').value = grade.duration || '';
            document.getElementById('sortOrder').value = grade.sortOrder || '';
            document.getElementById('isActive').checked = grade.isActive;
        } catch (error) {
            console.error('Error loading grade:', error);
            showAlert('Error loading grade data', 'error');
        }
    }

    async function updateSortOrder() {
        const companyId = document.getElementById('companyId').value;

        if (companyId && !isEditMode) {
            try {
                const response = await fetch('@Url.Action("GetNextSortOrder", "Grade")?companyId=' + companyId);
                const result = await response.json();
                document.getElementById('sortOrder').value = result.nextSortOrder;
            } catch (error) {
                console.error('Error getting next sort order:', error);
            }
        }
    }

    document.getElementById('gradeForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        // Add the checkbox value explicitly since FormData doesn't handle unchecked checkboxes
        formData.set('isActive', document.getElementById('isActive').checked);

        const url = isEditMode ? '@Url.Action("Update", "Grade")' : '@Url.Action("Create", "Grade")';

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('gradeModal')).hide();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving grade:', error);
            showAlert('Error saving grade', 'error');
        }
    });

    async function deleteGrade(gradeId, gradeName) {
        if (confirm(`Are you sure you want to delete grade "${gradeName}"?`)) {
            try {
                const response = await fetch('@Url.Action("Delete", "Grade")?id=' + gradeId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting grade:', error);
                showAlert('Error deleting grade', 'error');
            }
        }
    }

    // Search functionality
    document.getElementById('searchGrades').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('#gradesTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });

    // Grade code uppercase transformation
    document.getElementById('gradeCode').addEventListener('input', function(e) {
        e.target.value = e.target.value.toUpperCase();
    });

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }
</script>