@model IEnumerable<KMSI.Models.Book>
@{
    ViewData["Title"] = "Book Management";
    ViewData["Breadcrumb"] = "Book Management";
}

<div class="book-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">Book Management</h1>
            <p class="text-muted">Manage books and learning materials</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openBookModal()">
            <i class="fas fa-plus me-2"></i>Add New Book
        </button>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body py-3">
            <div class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label for="filterCategory" class="form-label mb-1">Filter by Category</label>
                    <select class="form-select form-select-sm" id="filterCategory">
                        <option value="">All Categories</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="searchBooks" class="form-label mb-1">Search Books</label>
                    <input type="text" class="form-control form-control-sm" id="searchBooks" placeholder="Search by title, author, or code...">
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm w-100" onclick="clearFilters()">
                        <i class="fas fa-times me-1"></i>Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Books Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Books List</h5>
                </div>
                <div class="col-auto">
                    <span class="text-muted" id="bookCount">@Model.Count() books</span>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="booksTable">
                    <thead class="table-light">
                        <tr>
                            <th>Book</th>
                            <th>Code</th>
                            <th>Author</th>
                            <th>Publisher</th>
                            <th>Category</th>
                            <th>ISBN</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in Model)
                        {
                            <tr data-category="@(book.Category ?? "")">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="book-icon me-3">
                                            <i class="fas fa-book"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@book.BookTitle</div>
                                            <small class="text-muted">@book.BookCode</small>
                                            @if (!string.IsNullOrEmpty(book.Description))
                                            {
                                                <div class="book-description mt-1">
                                                    <small class="text-muted" title="@book.Description">
                                                        @(book.Description.Length > 60 ? book.Description.Substring(0, 60) + "..." : book.Description)
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-primary">@book.BookCode</span>
                                </td>
                                <td>
                                    <span class="author-text">@(book.Author ?? "-")</span>
                                </td>
                                <td>
                                    <span class="publisher-text">@(book.Publisher ?? "-")</span>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(book.Category))
                                    {
                                        <span class="badge bg-info">@book.Category</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(book.ISBN))
                                    {
                                        <code class="isbn-code">@book.ISBN</code>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (book.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary" onclick="editBook(@book.BookId)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteBook(@book.BookId, '@book.BookTitle')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Book Modal -->
<div class="modal fade" id="bookModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="bookForm">
                <div class="modal-body">
                    <input type="hidden" id="bookId" name="bookId" value="0">

                    <div class="row g-3">
                        <!-- Basic Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-book me-2"></i>Book Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required>
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="bookCode" class="form-label">Book Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control text-uppercase" id="bookCode" name="bookCode" maxlength="20" required>
                        </div>

                        <div class="col-12">
                            <label for="bookTitle" class="form-label">Book Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="bookTitle" name="bookTitle" maxlength="200" required>
                        </div>

                        <div class="col-md-6">
                            <label for="author" class="form-label">Author</label>
                            <input type="text" class="form-control" id="author" name="author" maxlength="100">
                        </div>

                        <div class="col-md-6">
                            <label for="publisher" class="form-label">Publisher</label>
                            <input type="text" class="form-control" id="publisher" name="publisher" maxlength="100">
                        </div>

                        <!-- Publication Details -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-info-circle me-2"></i>Publication Details
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="isbn" class="form-label">ISBN</label>
                            <input type="text" class="form-control" id="isbn" name="isbn" maxlength="20">
                            <small class="text-muted">International Standard Book Number</small>
                        </div>

                        <div class="col-md-6">
                            <label for="category" class="form-label">Category</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="category" name="category" maxlength="50" list="categoryList">
                                <button class="btn btn-outline-secondary" type="button" id="categoryDropdown" data-bs-toggle="dropdown">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" id="categoryDropdownMenu">
                                    @foreach (var category in ViewBag.Categories)
                                    {
                                        <li><a class="dropdown-item" href="#" onclick="selectCategory('@category')">@category</a></li>
                                    }
                                </ul>
                            </div>
                            <datalist id="categoryList">
                                @foreach (var category in ViewBag.Categories)
                                {
                                    <option value="@category"></option>
                                }
                            </datalist>
                        </div>

                        <div class="col-12">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="4" maxlength="500"></textarea>
                        </div>

                        <div class="col-md-6">
                            <div class="form-check form-switch mt-3">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active Book
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Book
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .book-icon {
        width: 40px;
        height: 40px;
        background: var(--success-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 16px;
    }

    .book-description {
        max-width: 300px;
        cursor: help;
    }

    .isbn-code {
        background-color: var(--gray-100);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
    }

    .author-text, .publisher-text {
        color: var(--gray-700);
        font-weight: 500;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-sm > .btn {
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    .text-uppercase {
        text-transform: uppercase;
    }

    .filter-section {
        background: var(--gray-50);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    @@media (max-width: 768px) {
        .table-responsive
        {
            font-size: 0.875rem;
        }

        .book-icon {
            width: 32px;
            height: 32px;
            font-size: 14px;
        }

        .btn-group-sm > .btn {
            padding: 0.25rem 0.5rem;
        }

        .modal-dialog {
            margin: 0.5rem;
        }

        .book-description {
            max-width: 200px;
        }
    }   
</style>

<script>
    let isEditMode = false;

    function openBookModal(bookId = null) {
        isEditMode = !!bookId;
        const modal = new bootstrap.Modal(document.getElementById('bookModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit Book';
            loadBookData(bookId);
        } else {
            document.getElementById('modalTitle').textContent = 'Add New Book';
            document.getElementById('bookForm').reset();
            document.getElementById('bookId').value = '0';
            document.getElementById('isActive').checked = true;
        }

        modal.show();
    }

    function editBook(bookId) {
        openBookModal(bookId);
    }

    async function loadBookData(bookId) {
        try {
            const response = await fetch('@Url.Action("GetBook", "Book")?id=' + bookId);
            const book = await response.json();

            document.getElementById('bookId').value = book.bookId;
            document.getElementById('companyId').value = book.companyId;
            document.getElementById('bookCode').value = book.bookCode;
            document.getElementById('bookTitle').value = book.bookTitle;
            document.getElementById('author').value = book.author || '';
            document.getElementById('publisher').value = book.publisher || '';
            document.getElementById('isbn').value = book.isbn || '';
            document.getElementById('category').value = book.category || '';
            document.getElementById('description').value = book.description || '';
            document.getElementById('isActive').checked = book.isActive;
        } catch (error) {
            console.error('Error loading book:', error);
            showAlert('Error loading book data', 'error');
        }
    }

    function selectCategory(category) {
        document.getElementById('category').value = category;
    }

    document.getElementById('bookForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        // Add the checkbox value explicitly since FormData doesn't handle unchecked checkboxes
        formData.set('isActive', document.getElementById('isActive').checked);

        const url = isEditMode ? '@Url.Action("Update", "Book")' : '@Url.Action("Create", "Book")';

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('bookModal')).hide();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving book:', error);
            showAlert('Error saving book', 'error');
        }
    });

    async function deleteBook(bookId, bookTitle) {
        if (confirm(`Are you sure you want to delete book "${bookTitle}"?`)) {
            try {
                const response = await fetch('@Url.Action("Delete", "Book")?id=' + bookId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting book:', error);
                showAlert('Error deleting book', 'error');
            }
        }
    }

    // Filter and search functionality
    function filterBooks() {
        const categoryFilter = document.getElementById('filterCategory').value.toLowerCase();
        const searchTerm = document.getElementById('searchBooks').value.toLowerCase();
        const rows = document.querySelectorAll('#booksTable tbody tr');
        let visibleCount = 0;

        rows.forEach(row => {
            const category = row.getAttribute('data-category').toLowerCase();
            const text = row.textContent.toLowerCase();

            const categoryMatch = !categoryFilter || category === categoryFilter;
            const textMatch = !searchTerm || text.includes(searchTerm);

            if (categoryMatch && textMatch) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });

        document.getElementById('bookCount').textContent = `${visibleCount} books`;
    }

    function clearFilters() {
        document.getElementById('filterCategory').value = '';
        document.getElementById('searchBooks').value = '';
        filterBooks();
    }

    // Event listeners
    document.getElementById('filterCategory').addEventListener('change', filterBooks);
    document.getElementById('searchBooks').addEventListener('input', filterBooks);

    // Book code uppercase transformation
    document.getElementById('bookCode').addEventListener('input', function(e) {
        e.target.value = e.target.value.toUpperCase();
    });

    // ISBN formatting
    document.getElementById('isbn').addEventListener('input', function(e) {
        // Remove any non-digit or non-X characters
        let value = e.target.value.replace(/[^0-9X-]/gi, '');
        e.target.value = value.toUpperCase();
    });

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    // Initialize filters on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Set initial book count
        const totalBooks = document.querySelectorAll('#booksTable tbody tr').length;
        document.getElementById('bookCount').textContent = `${totalBooks} books`;
    });
</script>