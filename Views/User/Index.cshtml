@model IEnumerable<KMSI.Models.User>
@{
    ViewData["Title"] = "User Management";
    ViewData["Breadcrumb"] = "User Management";
}

<div class="user-management">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">User Management</h1>
            <p class="text-muted">Manage system users and their permissions</p>
        </div>
        <button type="button" class="btn btn-primary" onclick="openUserModal()">
            <i class="fas fa-plus me-2"></i>Add New User
        </button>
    </div>

    <!-- Users Table -->
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Users List</h5>
                </div>
                <div class="col-auto">
                    <div class="input-group input-group-sm" style="width: 250px;">
                        <input type="text" class="form-control" id="searchUsers" placeholder="Search users...">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="usersTable">
                    <thead class="table-light">
                        <tr>
                            <th>User</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Site</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="user-avatar me-3">
                                            @user.FirstName.Substring(0, 1)@user.LastName.Substring(0, 1)
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@user.FirstName @user.LastName</div>
                                            <small class="text-muted">@user.Phone</small>
                                        </div>
                                    </div>
                                </td>
                                <td>@user.Username</td>
                                <td>@user.Email</td>
                                <td>
                                    <span class="badge bg-primary">@user.UserLevel?.LevelName</span>
                                </td>
                                <td>@(user.Site?.SiteName ?? "-")</td>
                                <td>
                                    @if (user.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary" onclick="editUser(@user.UserId)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteUser(@user.UserId, '@user.FirstName @user.LastName')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- User Modal -->
<div class="modal fade" id="userModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="userForm">
                <div class="modal-body">
                    <input type="hidden" id="userId" name="userId" value="0">

                    <div class="row g-3">
                        <!-- Basic Information -->
                        <div class="col-12">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user me-2"></i>Basic Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="firstName" class="form-label">First Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="firstName" name="firstName" required>
                        </div>

                        <div class="col-md-6">
                            <label for="lastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="lastName" name="lastName" required>
                        </div>

                        <div class="col-md-6">
                            <label for="username" class="form-label">Username <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="username" name="username" required>
                        </div>

                        <div class="col-md-6">
                            <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>

                        <div class="col-md-6">
                            <label for="password" class="form-label">Password <span class="text-danger" id="passwordRequired">*</span></label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="password" name="password">
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('password')">
                                    <i class="fas fa-eye" id="passwordEye"></i>
                                </button>
                            </div>
                            <small class="text-muted">Leave blank to keep current password (for updates)</small>
                        </div>

                        <div class="col-md-6">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="text" class="form-control" id="phone" name="phone">
                        </div>

                        <!-- Assignment Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-building me-2"></i>Assignment Information
                            </h6>
                        </div>

                        <div class="col-md-4">
                            <label for="companyId" class="form-label">Company <span class="text-danger">*</span></label>
                            <select class="form-select" id="companyId" name="companyId" required onchange="loadSites()">
                                <option value="">Select Company</option>
                                @foreach (var company in ViewBag.Companies)
                                {
                                    <option value="@company.CompanyId">@company.CompanyName</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="siteId" class="form-label">Site</label>
                            <select class="form-select" id="siteId" name="siteId">
                                <option value="">Select Site (Optional)</option>
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label for="userLevelId" class="form-label">User Level <span class="text-danger">*</span></label>
                            <select class="form-select" id="userLevelId" name="userLevelId" required>
                                <option value="">Select User Level</option>
                                @foreach (var level in ViewBag.UserLevels)
                                {
                                    <option value="@level.UserLevelId">@level.LevelName</option>
                                }
                            </select>
                        </div>

                        <!-- Personal Information -->
                        <div class="col-12 mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-info-circle me-2"></i>Personal Information
                            </h6>
                        </div>

                        <div class="col-md-6">
                            <label for="dateOfBirth" class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" id="dateOfBirth" name="dateOfBirth">
                        </div>

                        <div class="col-md-6">
                            <label for="gender" class="form-label">Gender</label>
                            <select class="form-select" id="gender" name="gender">
                                <option value="">Select Gender</option>
                                <option value="M">Male</option>
                                <option value="F">Female</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="city">
                        </div>

                        <div class="col-md-6">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active User
                                </label>
                            </div>
                        </div>

                        <div class="col-12">
                            <label for="address" class="form-label">Address</label>
                            <textarea class="form-control" id="address" name="address" rows="2"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .user-avatar {
        width: 40px;
        height: 40px;
        background: var(--primary-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 14px;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .btn-group-sm > .btn {
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background: var(--light-bg);
        border-bottom: 1px solid var(--gray-200);
    }

    .form-label {
        font-weight: 500;
        color: var(--gray-700);
    }

    .text-primary {
        color: var(--primary-color) !important;
    }

    @@media (max-width: 768px) {
        .table-responsive {
            font-size: 0.875rem;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            font-size: 12px;
        }

        .btn-group-sm > .btn {
            padding: 0.25rem 0.5rem;
        }

        .modal-dialog {
            margin: 0.5rem;
        }
    }
</style>

<script>
    let isEditMode = false;

    function openUserModal(userId = null) {
        isEditMode = !!userId;
        const modal = new bootstrap.Modal(document.getElementById('userModal'));

        if (isEditMode) {
            document.getElementById('modalTitle').textContent = 'Edit User';
            document.getElementById('passwordRequired').style.display = 'none';
            loadUserData(userId);
        } else {
            document.getElementById('modalTitle').textContent = 'Add New User';
            document.getElementById('passwordRequired').style.display = 'inline';
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '0';
            document.getElementById('isActive').checked = true;
        }

        modal.show();
    }

    function editUser(userId) {
        openUserModal(userId);
    }

    async function loadUserData(userId) {
        try {
            const response = await fetch('@Url.Action("GetUser", "User")?id=' + userId);
            const user = await response.json();

            document.getElementById('userId').value = user.userId;
            document.getElementById('firstName').value = user.firstName;
            document.getElementById('lastName').value = user.lastName;
            document.getElementById('username').value = user.username;
            document.getElementById('email').value = user.email;
            document.getElementById('phone').value = user.phone || '';
            document.getElementById('companyId').value = user.companyId;
            document.getElementById('userLevelId').value = user.userLevelId;
            document.getElementById('dateOfBirth').value = user.dateOfBirth || '';
            document.getElementById('gender').value = user.gender || '';
            document.getElementById('city').value = user.city || '';
            document.getElementById('address').value = user.address || '';
            document.getElementById('isActive').checked = user.isActive;

            // Load sites for the selected company
            await loadSites();
            document.getElementById('siteId').value = user.siteId || '';
        } catch (error) {
            console.error('Error loading user:', error);
            showAlert('Error loading user data', 'error');
        }
    }

    async function loadSites() {
        const companyId = document.getElementById('companyId').value;
        const siteSelect = document.getElementById('siteId');

        siteSelect.innerHTML = '<option value="">Select Site (Optional)</option>';

        if (companyId) {
            try {
                const response = await fetch('@Url.Action("GetSitesByCompany", "User")?companyId=' + companyId);
                const sites = await response.json();

                sites.forEach(site => {
                    const option = document.createElement('option');
                    option.value = site.value;
                    option.textContent = site.text;
                    siteSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading sites:', error);
            }
        }
    }

    document.getElementById('userForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);

        // Add the checkbox value explicitly since FormData doesn't handle unchecked checkboxes
        formData.set('isActive', document.getElementById('isActive').checked);

        const url = isEditMode ? '@Url.Action("Update", "User")' : '@Url.Action("Create", "User")';
            
        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData  // Send as FormData, not JSON
            });

            const result = await response.json();
            if (result.success) {
                showAlert(result.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('userModal')).hide();
                setTimeout(() => {
                    location.reload();
                }, 1500); // 1.5 detik delay
            } else {
                showAlert(result.message, 'error');
            }
        } catch (error) {
            console.error('Error saving user:', error);
            showAlert('Error saving user', 'error');
        }
    });

    async function deleteUser(userId, userName) {
        if (confirm(`Are you sure you want to delete user "${userName}"?`)) {
            try {
                const response = await fetch('@Url.Action("Delete", "User")?id=' + userId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500); // 1.5 detik delay
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                showAlert('Error deleting user', 'error');
            }
        }
    }

    function togglePassword(fieldId) {
        const field = document.getElementById(fieldId);
        const eye = document.getElementById(fieldId + 'Eye');

        if (field.type === 'password') {
            field.type = 'text';
            eye.classList.remove('fa-eye');
            eye.classList.add('fa-eye-slash');
        } else {
            field.type = 'password';
            eye.classList.remove('fa-eye-slash');
            eye.classList.add('fa-eye');
        }
    }

    // Search functionality
    document.getElementById('searchUsers').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('#usersTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });

    function showAlert(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }
</script>
